,EnglishRules,LudRules
1116,"Carnarvon and Carter rules on the Crossover 1 board. When a player lands on a hole with a line connecting it to another hole, the player has the option to move forward to the hole at the other end of the line. When a player lands on a hole occupied by one of their opponent's pieces, the opponent's piece is removed from the board and must start over.","(game ""58 Holes"" (players 2) (equipment { (board (graph vertices:{ {9 27} {9 24} {9 21} {9 18} {9 15} {9 12} {9 9} {9 6} {9 3} {9 0} {3 0} {3 2} {3 4} {3 6} {3 8} {3 10} {3 12} {3 14} {3 16} {3 18} {3 20} {3 22} {3 24} {3 26} {3 28} {4 30} {6 31} {8 32} {10 33} {15 27} {15 24} {15 21} {15 18} {15 15} {15 12} {15 9} {15 6} {15 3} {15 0} {21 0} {21 2} {21 4} {21 6} {21 8} {21 10} {21 12} {21 14} {21 16} {21 18} {21 20} {21 22} {21 24} {21 26} {21 28} {20 30} {18 31} {16 32} {14 33} {12 33} } edges:{ {0 1} {1 2} {2 3} {3 4} {4 5} {5 6} {6 7} {7 8} {8 9} {9 10} {10 11} {11 12} {12 13} {13 14} {14 15} {15 16} {16 17} {17 18} {18 19} {19 20} {20 21} {21 22} {22 23} {23 24} {24 25} {25 26} {26 27} {27 28} {28 58} {29 30} {30 31} {31 32} {32 33} {33 34} {34 35} {35 36} {36 37} {37 38} {38 39} {39 40} {40 41} {41 42} {42 43} {43 44} {44 45} {45 46} {46 47} {47 48} {48 49} {49 50} {50 51} {51 52} {52 53} {53 54} {54 55} {55 56} {56 57} {57 58} } ) { (track ""Track1"" { 59 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 58 } P1 directed:True ) (track ""Track2"" { 60 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 } P2 directed:True ) } use:Vertex ) (hand Each) (dice d:2 from:0 num:4) (piece ""Marker"" Each (if (= (if (or (= (from) 59) (<= (from) 28)) (trackSite Move ""Track1"" steps:(count Pips)) (trackSite Move ""Track2"" steps:(count Pips)) ) 58 ) (move Remove (from)) (if (!= (if (or (= (from) 59) (<= (from) 28)) (trackSite Move ""Track1"" steps:(count Pips)) (trackSite Move ""Track2"" steps:(count Pips)) ) Off ) (if (not (is Friend (who at:(if (or (= (from) 59) (<= (from) 28)) (trackSite Move ""Track1"" steps:(count Pips) ) (trackSite Move ""Track2"" steps:(count Pips) ) ) ) ) ) (move (from) (to (if (or (= (from) 59) (<= (from) 28)) (trackSite Move ""Track1"" steps:(count Pips) ) (trackSite Move ""Track2"" steps:(count Pips) ) ) (apply (if (is Enemy (who at:(to))) (move (from (to)) (to (handSite (who at:(to)))) ) ) ) ) (then (if (!= (last To) (mapEntry (last To))) (moveAgain) ) ) ) ) ) ) ) (map { (pair 5 36) (pair 34 7) (pair 14 19) (pair 19 24) (pair 43 48) (pair 48 53) } ) } ) (rules (start { (place ""Marker1"" (handSite P1) count:5) (place ""Marker2"" (handSite P2) count:5) } ) (play (if (is Prev Mover) (or (move Pass) (move (from (last To)) (to (mapEntry (last To)) (apply (if (is Enemy (who at:(to))) (move (from (to)) (to (handSite (who at:(to)))) ) ) ) ) (then (if (!= (last To) (mapEntry (last To))) (moveAgain) ) ) ) ) (do (roll) next:(or (forEach Piece) (forEach Piece container:(mover)) ) ) ) ) (end (if (no Pieces Mover) (result Mover Win))) ) )"
1212,Carter rules on Crossover 2 board with D4.,"(game ""58 Holes"" (players 2) (equipment { (board (graph vertices:{ {9 27} {9 24} {9 21} {9 18} {9 15} {9 12} {9 9} {9 6} {9 3} {9 0} {3 0} {3.75 2} {4.5 4} {5.25 6} {6 8} {6.75 10} {7.5 12} {7.5 14} {6.75 16} {6 18} {5.25 20} {4.5 22} {3.75 24} {3 26} {3 28} {4 30} {6 31} {8 32} {10 33} {15 27} {15 24} {15 21} {15 18} {15 15} {15 12} {15 9} {15 6} {15 3} {15 0} {21 0} {20.25 2} {19.5 4} {18.75 6} {18 8} {17.25 10} {16.5 12} {16.5 14} {17.25 16} {18 18} {18.75 20} {19.5 22} {20.25 24} {21 26} {21 28} {20 30} {18 31} {16 32} {14 33} {12 33} } edges:{ {0 1} {1 2} {2 3} {3 4} {4 5} {5 6} {6 7} {7 8} {8 9} {9 10} {10 11} {11 12} {12 13} {13 14} {14 15} {15 16} {16 17} {17 18} {18 19} {19 20} {20 21} {21 22} {22 23} {23 24} {24 25} {25 26} {26 27} {27 28} {28 58} {29 30} {30 31} {31 32} {32 33} {33 34} {34 35} {35 36} {36 37} {37 38} {38 39} {39 40} {40 41} {41 42} {42 43} {43 44} {44 45} {45 46} {46 47} {47 48} {48 49} {49 50} {50 51} {51 52} {52 53} {53 54} {54 55} {55 56} {56 57} {57 58} } ) { (track ""Track1"" { 59 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 58 } P1 directed:True ) (track ""Track2"" { 60 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 } P2 directed:True ) } use:Vertex ) (hand Each) (dice d:4 num:1) (piece ""Marker"" Each (if (= (if (or (= (from) 59) (<= (from) 28)) (trackSite Move ""Track1"" steps:(count Pips)) (trackSite Move ""Track2"" steps:(count Pips)) ) 58 ) (move Remove (from)) (if (!= (if (or (= (from) 59) (<= (from) 28)) (trackSite Move ""Track1"" steps:(count Pips)) (trackSite Move ""Track2"" steps:(count Pips)) ) Off ) (if (not (is Friend (who at:(if (or (= (from) 59) (<= (from) 28)) (trackSite Move ""Track1"" steps:(count Pips) ) (trackSite Move ""Track2"" steps:(count Pips) ) ) ) ) ) (move (from) (to (if (or (= (from) 59) (<= (from) 28)) (trackSite Move ""Track1"" steps:(count Pips) ) (trackSite Move ""Track2"" steps:(count Pips) ) ) (apply (if (is Enemy (who at:(to))) (move (from (to)) (to (handSite (who at:(to)))) ) ) ) ) (then (if (!= (last To) (mapEntry (last To))) (moveAgain) ) ) ) ) ) ) ) (map { (pair 7 38) (pair 36 9) (pair 5 20) (pair 34 49) }) } ) (rules (start { (place ""Marker1"" (handSite P1) count:5) (place ""Marker2"" (handSite P2) count:5) } ) (play (if (is Prev Mover) (or (move Pass) (move (from (last To)) (to (mapEntry (last To)) (apply (if (is Enemy (who at:(to))) (move (from (to)) (to (handSite (who at:(to)))) ) ) ) ) (then (if (!= (last To) (mapEntry (last To))) (moveAgain) ) ) ) ) (do (roll) next:(or (forEach Piece) (forEach Piece container:(mover)) ) ) ) ) (end (if (no Pieces Mover) (result Mover Win))) ) )"
1480,Carter rules on Crossover 2 board with D4.,"(game ""58 Holes"" (players 2) (equipment { (board (graph vertices:{ {9 27} {9 25} {9 23} {9 21} {9 19} {9 15} {9 12} {9 9} {9 6} {9 3} {9 0} {7 1} {5 2.5} {4 5} {4 7} {4 9} {4 11} {4 13} {4 15} {4 19} {4.2 21} {4.3 22.5} {4.4 24} {4.6 25.5} {4.8 27} {6 28} {7 29} {8 30} {9 31} {15 27} {15 25} {15 23} {15 21} {15 19} {15 15} {15 12} {15 9} {15 6} {15 3} {15 0} {17 1} {19 2.5} {20 5} {20 7} {20 9} {20 11} {20 13} {20 15} {19.8 19} {19.7 21} {19.6 22.5} {19.4 24} {19.2 25.5} {19 27} {18 28} {17 29} {16 30} {15 31} {12 33} } edges:{ {0 1} {1 2} {2 3} {3 4} {4 5} {5 6} {6 7} {7 8} {8 9} {9 10} {10 11} {11 12} {12 13} {13 14} {14 15} {15 16} {16 17} {17 18} {18 19} {19 20} {20 21} {21 22} {22 23} {23 24} {24 25} {25 26} {26 27} {27 28} {28 58} {29 30} {30 31} {31 32} {32 33} {33 34} {34 35} {35 36} {36 37} {37 38} {38 39} {39 40} {40 41} {41 42} {42 43} {43 44} {44 45} {45 46} {46 47} {47 48} {48 49} {49 50} {50 51} {51 52} {52 53} {53 54} {54 55} {55 56} {56 57} {57 58} } ) { (track ""Track1"" { 59 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 58 } P1 directed:True ) (track ""Track2"" { 60 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 } P2 directed:True ) } use:Vertex ) (hand Each) (dice d:4 num:1) (piece ""Marker"" Each (if (= (if (or (= (from) 59) (<= (from) 28)) (trackSite Move ""Track1"" steps:(count Pips)) (trackSite Move ""Track2"" steps:(count Pips)) ) 58 ) (move Remove (from)) (if (!= (if (or (= (from) 59) (<= (from) 28)) (trackSite Move ""Track1"" steps:(count Pips)) (trackSite Move ""Track2"" steps:(count Pips)) ) Off ) (if (not (is Friend (who at:(if (or (= (from) 59) (<= (from) 28)) (trackSite Move ""Track1"" steps:(count Pips) ) (trackSite Move ""Track2"" steps:(count Pips) ) ) ) ) ) (move (from) (to (if (or (= (from) 59) (<= (from) 28)) (trackSite Move ""Track1"" steps:(count Pips) ) (trackSite Move ""Track2"" steps:(count Pips) ) ) (apply (if (is Enemy (who at:(to))) (move (from (to)) (to (handSite (who at:(to)))) ) ) ) ) (then (if (!= (last To) (mapEntry (last To))) (moveAgain) ) ) ) ) ) ) ) (map { (pair 0 31) (pair 0 24) (pair 4 19) (pair 4 33) (pair 5 14) (pair 34 43) (pair 29 53) (pair 29 2) (pair 33 4) (pair 33 48) } ) } ) (rules (start { (place ""Marker1"" (handSite P1) count:5) (place ""Marker2"" (handSite P2) count:5) } ) (play (if (is Prev Mover) (or (move Pass) (move (from (last To)) (to (mapEntry (last To)) (apply (if (is Enemy (who at:(to))) (move (from (to)) (to (handSite (who at:(to)))) ) ) ) ) (then (if (!= (last To) (mapEntry (last To))) (moveAgain) ) ) ) ) (do (roll) next:(or (forEach Piece) (forEach Piece container:(mover)) ) ) ) ) (end (if (no Pieces Mover) (result Mover Win))) ) )"
1560,Using six-sided die.,"(game ""58 Holes"" (players 2) (equipment { (board (graph vertices:{ {9 27} {9 25} {9 23} {9 21} {9 19} {9 15} {9 12} {9 9} {9 6} {9 3} {9 0} {7 1} {5 2.5} {4 5} {4 7} {4 9} {4 11} {4 13} {4 15} {4 19} {4.2 21} {4.3 22.5} {4.4 24} {4.6 25.5} {4.8 27} {6 28} {7 29} {8 30} {9 31} {15 27} {15 25} {15 23} {15 21} {15 19} {15 15} {15 12} {15 9} {15 6} {15 3} {15 0} {17 1} {19 2.5} {20 5} {20 7} {20 9} {20 11} {20 13} {20 15} {19.8 19} {19.7 21} {19.6 22.5} {19.4 24} {19.2 25.5} {19 27} {18 28} {17 29} {16 30} {15 31} {12 33} } edges:{ {0 1} {1 2} {2 3} {3 4} {4 5} {5 6} {6 7} {7 8} {8 9} {9 10} {10 11} {11 12} {12 13} {13 14} {14 15} {15 16} {16 17} {17 18} {18 19} {19 20} {20 21} {21 22} {22 23} {23 24} {24 25} {25 26} {26 27} {27 28} {28 58} {29 30} {30 31} {31 32} {32 33} {33 34} {34 35} {35 36} {36 37} {37 38} {38 39} {39 40} {40 41} {41 42} {42 43} {43 44} {44 45} {45 46} {46 47} {47 48} {48 49} {49 50} {50 51} {51 52} {52 53} {53 54} {54 55} {55 56} {56 57} {57 58} } ) { (track ""Track1"" { 59 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 58 } P1 directed:True ) (track ""Track2"" { 60 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 } P2 directed:True ) } use:Vertex ) (hand Each) (dice d:6 num:1) (piece ""Marker"" Each (if (= (if (or (= (from) 59) (<= (from) 28)) (trackSite Move ""Track1"" steps:(count Pips)) (trackSite Move ""Track2"" steps:(count Pips)) ) 58 ) (move Remove (from)) (if (!= (if (or (= (from) 59) (<= (from) 28)) (trackSite Move ""Track1"" steps:(count Pips)) (trackSite Move ""Track2"" steps:(count Pips)) ) Off ) (if (not (is Friend (who at:(if (or (= (from) 59) (<= (from) 28)) (trackSite Move ""Track1"" steps:(count Pips) ) (trackSite Move ""Track2"" steps:(count Pips) ) ) ) ) ) (move (from) (to (if (or (= (from) 59) (<= (from) 28)) (trackSite Move ""Track1"" steps:(count Pips) ) (trackSite Move ""Track2"" steps:(count Pips) ) ) (apply (if (is Enemy (who at:(to))) (move (from (to)) (to (handSite (who at:(to)))) ) ) ) ) (then (if (!= (last To) (mapEntry (last To))) (moveAgain) ) ) ) ) ) ) ) (map { (pair 0 31) (pair 0 24) (pair 4 19) (pair 4 33) (pair 5 14) (pair 34 43) (pair 29 53) (pair 29 2) (pair 33 4) (pair 33 48) } ) } ) (rules (start { (place ""Marker1"" (handSite P1) count:5) (place ""Marker2"" (handSite P2) count:5) } ) (play (if (is Prev Mover) (or (move Pass) (move (from (last To)) (to (mapEntry (last To)) (apply (if (is Enemy (who at:(to))) (move (from (to)) (to (handSite (who at:(to)))) ) ) ) ) (then (if (!= (last To) (mapEntry (last To))) (moveAgain) ) ) ) ) (do (roll) next:(or (forEach Piece) (forEach Piece container:(mover)) ) ) ) ) (end (if (no Pieces Mover) (result Mover Win))) ) )"
1806,Using six-sided die.,"(game ""58 Holes"" (players 2) (equipment { (board (graph vertices:{ {9 27} {9 25} {9 23} {9 21} {9 19} {9 15} {9 12} {9 9} {9 6} {9 3} {9 0} {7 1} {5 2.5} {4 5} {4 7} {4 9} {4 11} {4 13} {4 15} {4 19} {4.2 21} {4.3 22.5} {4.4 24} {4.6 25.5} {4.8 27} {6 28} {7 29} {8 30} {9 31} {15 27} {15 25} {15 23} {15 21} {15 19} {15 15} {15 12} {15 9} {15 6} {15 3} {15 0} {17 1} {19 2.5} {20 5} {20 7} {20 9} {20 11} {20 13} {20 15} {19.8 19} {19.7 21} {19.6 22.5} {19.4 24} {19.2 25.5} {19 27} {18 28} {17 29} {16 30} {15 31} {12 33} } edges:{ {0 1} {1 2} {2 3} {3 4} {4 5} {5 6} {6 7} {7 8} {8 9} {9 10} {10 11} {11 12} {12 13} {13 14} {14 15} {15 16} {16 17} {17 18} {18 19} {19 20} {20 21} {21 22} {22 23} {23 24} {24 25} {25 26} {26 27} {27 28} {28 58} {29 30} {30 31} {31 32} {32 33} {33 34} {34 35} {35 36} {36 37} {37 38} {38 39} {39 40} {40 41} {41 42} {42 43} {43 44} {44 45} {45 46} {46 47} {47 48} {48 49} {49 50} {50 51} {51 52} {52 53} {53 54} {54 55} {55 56} {56 57} {57 58} } ) { (track ""Track1"" { 59 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 58 } P1 directed:True ) (track ""Track2"" { 60 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 } P2 directed:True ) } use:Vertex ) (hand Each) (dice d:6 num:1) (piece ""Marker"" Each (if (= (if (or (= (from) 59) (<= (from) 28)) (trackSite Move ""Track1"" steps:(count Pips)) (trackSite Move ""Track2"" steps:(count Pips)) ) 58 ) (move Remove (from)) (if (!= (if (or (= (from) 59) (<= (from) 28)) (trackSite Move ""Track1"" steps:(count Pips)) (trackSite Move ""Track2"" steps:(count Pips)) ) Off ) (if (not (is Friend (who at:(if (or (= (from) 59) (<= (from) 28)) (trackSite Move ""Track1"" steps:(count Pips) ) (trackSite Move ""Track2"" steps:(count Pips) ) ) ) ) ) (move (from) (to (if (or (= (from) 59) (<= (from) 28)) (trackSite Move ""Track1"" steps:(count Pips) ) (trackSite Move ""Track2"" steps:(count Pips) ) ) (apply (if (is Enemy (who at:(to))) (move (from (to)) (to (handSite (who at:(to)))) ) ) ) ) (then (if (!= (last To) (mapEntry (last To))) (moveAgain) ) ) ) ) ) ) ) (map { (pair 0 24) (pair 1 32) (pair 29 53) (pair 30 3) (pair 4 20) (pair 33 48) (pair 5 38) (pair 34 9) (pair 25 57) (pair 54 28) } ) } ) (rules (start { (place ""Marker1"" (handSite P1) count:5) (place ""Marker2"" (handSite P2) count:5) } ) (play (if (is Prev Mover) (or (move Pass) (move (from (last To)) (to (mapEntry (last To)) (apply (if (is Enemy (who at:(to))) (move (from (to)) (to (handSite (who at:(to)))) ) ) ) ) (then (if (!= (last To) (mapEntry (last To))) (moveAgain) ) ) ) ) (do (roll) next:(or (forEach Piece) (forEach Piece container:(mover)) ) ) ) ) (end (if (no Pieces Mover) (result Mover Win))) ) )"
2176,"Carnarvon and Carter rules on the Crossover 1 board. When a player lands on a hole with a line connecting it to another hole, the player has the option to move forward to the hole at the other end of the line. When a player lands on a hole occupied by one of their opponent's pieces, the opponent's piece is removed from the board and must start over.","(game ""58 Holes"" (players 2) (equipment { (board (graph vertices:{ {9 27} {9 24} {9 21} {9 18} {9 15} {9 12} {9 9} {9 6} {9 3} {9 0} {3 0} {3 2} {3 4} {3 6} {3 8} {3 10} {3 12} {3 14} {3 16} {3 18} {3 20} {3 22} {3 24} {3 26} {3 28} {4 30} {6 31} {8 32} {10 33} {15 27} {15 24} {15 21} {15 18} {15 15} {15 12} {15 9} {15 6} {15 3} {15 0} {21 0} {21 2} {21 4} {21 6} {21 8} {21 10} {21 12} {21 14} {21 16} {21 18} {21 20} {21 22} {21 24} {21 26} {21 28} {20 30} {18 31} {16 32} {14 33} {12 33} } edges:{ {0 1} {1 2} {2 3} {3 4} {4 5} {5 6} {6 7} {7 8} {8 9} {9 10} {10 11} {11 12} {12 13} {13 14} {14 15} {15 16} {16 17} {17 18} {18 19} {19 20} {20 21} {21 22} {22 23} {23 24} {24 25} {25 26} {26 27} {27 28} {28 58} {29 30} {30 31} {31 32} {32 33} {33 34} {34 35} {35 36} {36 37} {37 38} {38 39} {39 40} {40 41} {41 42} {42 43} {43 44} {44 45} {45 46} {46 47} {47 48} {48 49} {49 50} {50 51} {51 52} {52 53} {53 54} {54 55} {55 56} {56 57} {57 58} } ) { (track ""Track1"" { 59 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 58 } P1 directed:True ) (track ""Track2"" { 60 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 } P2 directed:True ) } use:Vertex ) (hand Each) (dice d:2 from:0 num:4) (piece ""Marker"" Each (if (= (if (or (= (from) 59) (<= (from) 28)) (trackSite Move ""Track1"" steps:(count Pips)) (trackSite Move ""Track2"" steps:(count Pips)) ) 58 ) (move Remove (from)) (if (!= (if (or (= (from) 59) (<= (from) 28)) (trackSite Move ""Track1"" steps:(count Pips)) (trackSite Move ""Track2"" steps:(count Pips)) ) Off ) (if (not (is Friend (who at:(if (or (= (from) 59) (<= (from) 28)) (trackSite Move ""Track1"" steps:(count Pips) ) (trackSite Move ""Track2"" steps:(count Pips) ) ) ) ) ) (move (from) (to (if (or (= (from) 59) (<= (from) 28)) (trackSite Move ""Track1"" steps:(count Pips) ) (trackSite Move ""Track2"" steps:(count Pips) ) ) (apply (if (is Enemy (who at:(to))) (move (from (to)) (to (handSite (who at:(to)))) ) ) ) ) (then (if (!= (last To) (mapEntry (last To))) (moveAgain) ) ) ) ) ) ) ) (map { (pair 5 34) (pair 36 7) (pair 14 19) (pair 19 24) (pair 43 48) (pair 48 53) } ) } ) (rules (start { (place ""Marker1"" (handSite P1) count:5) (place ""Marker2"" (handSite P2) count:5) } ) (play (if (is Prev Mover) (or (move Pass) (move (from (last To)) (to (mapEntry (last To)) (apply (if (is Enemy (who at:(to))) (move (from (to)) (to (handSite (who at:(to)))) ) ) ) ) (then (if (!= (last To) (mapEntry (last To))) (moveAgain) ) ) ) ) (do (roll) next:(or (forEach Piece) (forEach Piece container:(mover)) ) ) ) ) (end (if (no Pieces Mover) (result Mover Win))) ) )"
3278,"Five pieces per player, which begin on the first five spaces in each track. Four sticks, each with a white side and a yellow side. Throws equal the number of white sides which fall up; when only yellow sides are up the throw equals 6. A throw of 1, 4, or 6 grants another throw to the player. Players perform all of their throws first, and then move pieces according to the values of the throws without subdividing the value of a single throw. Players cannot move their pieces until the throw a 1. Pieces cannot move past one another in the home row. Each piece in the home row must individually be unlocked with a throw of 1 before it can move When a player's piece lands in a space occupied by an opponent's piece, the opponent's piece is removed from the board. When a piece lands on a hole with a line connecting it to another hole, the piece moves forward along that line to the hole on the opposite end it. When a piece reaches the opponent's starting row, it cannot move if there are other pieces belonging to the player outside of this row. A piece resting on a marked space cannot be captured.","(game ""58 Holes"" (players 2) (equipment { (board (graph vertices:{ {9 27} {9 24} {9 21} {9 18} {9 15} {9 12} {9 9} {9 6} {9 3} {9 0} {3 0} {3.75 2} {4.5 4} {5.25 6} {6 8} {6.75 10} {7.5 12} {7.5 14} {6.75 16} {6 18} {5.25 20} {4.5 22} {3.75 24} {3 26} {3 28} {4 30} {6 31} {8 32} {10 33} {15 27} {15 24} {15 21} {15 18} {15 15} {15 12} {15 9} {15 6} {15 3} {15 0} {21 0} {20.25 2} {19.5 4} {18.75 6} {18 8} {17.25 10} {16.5 12} {16.5 14} {17.25 16} {18 18} {18.75 20} {19.5 22} {20.25 24} {21 26} {21 28} {20 30} {18 31} {16 32} {14 33} {12 33} } edges:{ {0 1} {1 2} {2 3} {3 4} {4 5} {5 6} {6 7} {7 8} {8 9} {9 10} {10 11} {11 12} {12 13} {13 14} {14 15} {15 16} {16 17} {17 18} {18 19} {19 20} {20 21} {21 22} {22 23} {23 24} {24 25} {25 26} {26 27} {27 28} {28 58} {29 30} {30 31} {31 32} {32 33} {33 34} {34 35} {35 36} {36 37} {37 38} {38 39} {39 40} {40 41} {41 42} {42 43} {43 44} {44 45} {45 46} {46 47} {47 48} {48 49} {49 50} {50 51} {51 52} {52 53} {53 54} {54 55} {55 56} {56 57} {57 58} } ) { (track ""Track1"" { 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 } loop:True P1 ) (track ""Track2"" { 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 } loop:True P2 ) } use:Vertex ) (dice d:2 from:0 num:4) (piece ""Marker"" Each (if (if (is In (from) (sites Start (piece (id ""Marker"" Next))) ) (all Sites (sites Occupied by:Mover) if:(is In (site) (sites Start (piece (id ""Marker"" Next))) ) ) True ) (if (= 0 (state at:(from))) (forEach Site (sites (values Remembered ""Throws"")) (if (or (is Empty (trackSite Move steps:(site))) (is Enemy (who at:(trackSite Move steps:(site))) ) ) (move (from) (to (trackSite Move steps:(site)) (apply (forget Value ""Throws"" (site))) ) (then (if (!= (last To) (if (is Mover P1) (mapEntry ""ConnectionP1"" (last To) ) (mapEntry ""ConnectionP2"" (last To) ) ) ) (if (not (is Friend (who at:(if (is Mover P1) (mapEntry ""ConnectionP1"" (last To) ) (mapEntry ""ConnectionP2"" (last To) ) ) ) ) ) (move (from (last To)) (to (if (is Mover P1) (mapEntry ""ConnectionP1"" (last To) ) (mapEntry ""ConnectionP2"" (last To) ) ) ) ) ) ) ) ) ) ) (forEach Site (sites (values Remembered ""Throws"")) (if (= 1 (site)) (if (or (is Empty (trackSite Move steps:(site)) ) (is Enemy (who at:(trackSite Move steps:(site) ) ) ) ) (move (from) (to (trackSite Move steps:(site)) (apply (forget Value ""Throws"" (site)) ) ) (then (and (set State at:(last To) 0) (if (!= (last To) (if (is Mover P1) (mapEntry ""ConnectionP1"" (last To) ) (mapEntry ""ConnectionP2"" (last To) ) ) ) (if (not (is Friend (who at:(if (is Mover P1 ) (mapEntry ""ConnectionP1"" (last To ) ) (mapEntry ""ConnectionP2"" (last To ) ) ) ) ) ) (move (from (last To)) (to (if (is Mover P1 ) (mapEntry ""ConnectionP1"" (last To ) ) (mapEntry ""ConnectionP2"" (last To ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) (map ""ConnectionP1"" { (pair 7 38) (pair 36 9) (pair 5 20) (pair 49 34) } ) (map ""ConnectionP2"" { (pair 38 7) (pair 9 36) (pair 20 5) (pair 34 49) } ) (map ""Throw"" { (pair 0 6) (pair 1 1) (pair 2 2) (pair 3 3) (pair 4 4) } ) } ) (rules (start { (place ""Marker1"" (sites {0 1 2 3 4}) state:1) (place ""Marker2"" (sites {29 30 31 32 33}) state:1) } ) phases:{ (phase ""GetMoves"" (play (do (roll) next:(move Pass (then (remember Value ""Throws"" (mapEntry ""Throw"" (count Pips)) ) ) ) (then (moveAgain)) ) ) (nextPhase (not (is In (mapEntry ""Throw"" (count Pips)) (sites {1 4 6}) ) ) ""Movement"" ) ) (phase ""Movement"" (play (if (can Move (forEach Piece)) (forEach Piece (then (if (!= 0 (count Sites in:(sites (values Remembered ""Throws"") ) ) ) (moveAgain) ) ) ) (move Pass (then (forget Value ""Throws"" All))) ) ) (nextPhase (not (!= 0 (count Sites in:(sites (values Remembered ""Throws"")) ) ) ) ""GetMoves"" ) ) } (end (if (no Pieces Next) (result Next Loss))) ) )"
3544,"Five pieces per player, which begin on the first five spaces in each track. Four sticks, each with a white side and a yellow side. Throws equal the number of white sides which fall up; when only yellow sides are up the throw equals 6. A throw of 1, 4, or 6 grants another throw to the player. Players perform all of their throws first, and then move pieces according to the values of the throws without subdividing the value of a single throw. Players cannot move their pieces until the throw a 1. Pieces cannot move past one another in the home row. Each piece in the home row must individually be unlocked with a throw of 1 before it can move When a player's piece lands in a space occupied by an opponent's piece, the opponent's piece is removed from the board. When a piece lands on a hole with a line connecting it to another hole, the piece moves forward along that line to the hole on the opposite end it. When a piece reaches the opponent's starting row, it cannot move if there are other pieces belonging to the player outside of this row. A piece resting on a marked space cannot be captured.","(game ""58 Holes"" (players 2) (equipment { (board (graph vertices:{ {9 27} {9 25} {9 23} {9 21} {9 19} {9 15} {9 12} {9 9} {9 6} {9 3} {9 0} {7 1} {5 2.5} {4 5} {4 7} {4 9} {4 11} {4 13} {4 15} {4 19} {4.2 21} {4.3 22.5} {4.4 24} {4.6 25.5} {4.8 27} {6 28} {7 29} {8 30} {9 31} {15 27} {15 25} {15 23} {15 21} {15 19} {15 15} {15 12} {15 9} {15 6} {15 3} {15 0} {17 1} {19 2.5} {20 5} {20 7} {20 9} {20 11} {20 13} {20 15} {19.8 19} {19.7 21} {19.6 22.5} {19.4 24} {19.2 25.5} {19 27} {18 28} {17 29} {16 30} {15 31} {12 33} } edges:{ {0 1} {1 2} {2 3} {3 4} {4 5} {5 6} {6 7} {7 8} {8 9} {9 10} {10 11} {11 12} {12 13} {13 14} {14 15} {15 16} {16 17} {17 18} {18 19} {19 20} {20 21} {21 22} {22 23} {23 24} {24 25} {25 26} {26 27} {27 28} {28 58} {29 30} {30 31} {31 32} {32 33} {33 34} {34 35} {35 36} {36 37} {37 38} {38 39} {39 40} {40 41} {41 42} {42 43} {43 44} {44 45} {45 46} {46 47} {47 48} {48 49} {49 50} {50 51} {51 52} {52 53} {53 54} {54 55} {55 56} {56 57} {57 58} } ) { (track ""Track1"" { 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 } loop:True P1 ) (track ""Track2"" { 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 } loop:True P2 ) } use:Vertex ) (dice d:2 from:0 num:4) (piece ""Marker"" Each (if (if (is In (from) (sites Start (piece (id ""Marker"" Next))) ) (all Sites (sites Occupied by:Mover) if:(is In (site) (sites Start (piece (id ""Marker"" Next))) ) ) True ) (if (= 0 (state at:(from))) (forEach Site (sites (values Remembered ""Throws"")) (if (or (is Empty (trackSite Move steps:(site))) (is Enemy (who at:(trackSite Move steps:(site))) ) ) (move (from) (to (trackSite Move steps:(site)) (apply (forget Value ""Throws"" (site))) ) (then (if (!= (last To) (if (is Mover P1) (mapEntry ""ConnectionP1"" (last To) ) (mapEntry ""ConnectionP2"" (last To) ) ) ) (if (not (is Friend (who at:(if (is Mover P1) (mapEntry ""ConnectionP1"" (last To) ) (mapEntry ""ConnectionP2"" (last To) ) ) ) ) ) (move (from (last To)) (to (if (is Mover P1) (mapEntry ""ConnectionP1"" (last To) ) (mapEntry ""ConnectionP2"" (last To) ) ) ) ) ) ) ) ) ) ) (forEach Site (sites (values Remembered ""Throws"")) (if (= 1 (site)) (if (or (is Empty (trackSite Move steps:(site)) ) (is Enemy (who at:(trackSite Move steps:(site) ) ) ) ) (move (from) (to (trackSite Move steps:(site)) (apply (forget Value ""Throws"" (site)) ) ) (then (and (set State at:(last To) 0) (if (!= (last To) (if (is Mover P1) (mapEntry ""ConnectionP1"" (last To) ) (mapEntry ""ConnectionP2"" (last To) ) ) ) (if (not (is Friend (who at:(if (is Mover P1 ) (mapEntry ""ConnectionP1"" (last To ) ) (mapEntry ""ConnectionP2"" (last To ) ) ) ) ) ) (move (from (last To)) (to (if (is Mover P1 ) (mapEntry ""ConnectionP1"" (last To ) ) (mapEntry ""ConnectionP2"" (last To ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) (map ""ConnectionP1"" { (pair 0 24) (pair 4 19) (pair 5 14) (pair 53 29) (pair 48 33) (pair 43 34) (pair 33 4) (pair 31 0) (pair 29 2) } ) (map ""ConnectionP2"" { (pair 24 0) (pair 19 4) (pair 14 5) (pair 29 53) (pair 33 48) (pair 34 43) (pair 4 33) (pair 0 31) (pair 2 29) } ) (map ""Throw"" { (pair 0 6) (pair 1 1) (pair 2 2) (pair 3 3) (pair 4 4) } ) } ) (rules (start { (place ""Marker1"" (sites {0 1 2 3 4}) state:1) (place ""Marker2"" (sites {29 30 31 32 33}) state:1) } ) phases:{ (phase ""GetMoves"" (play (do (roll) next:(move Pass (then (remember Value ""Throws"" (mapEntry ""Throw"" (count Pips)) ) ) ) (then (moveAgain)) ) ) (nextPhase (not (is In (mapEntry ""Throw"" (count Pips)) (sites {1 4 6}) ) ) ""Movement"" ) ) (phase ""Movement"" (play (if (can Move (forEach Piece)) (forEach Piece (then (if (!= 0 (count Sites in:(sites (values Remembered ""Throws"") ) ) ) (moveAgain) ) ) ) (move Pass (then (forget Value ""Throws"" All))) ) ) (nextPhase (not (!= 0 (count Sites in:(sites (values Remembered ""Throws"")) ) ) ) ""GetMoves"" ) ) } (end (if (no Pieces Next) (result Next Loss))) ) )"
3826,"Five pieces per player, which begin on the first five spaces in each track. Four sticks, each with a white side and a yellow side. Throws equal the number of white sides which fall up; when only yellow sides are up the throw equals 6. A throw of 1, 4, or 6 grants another throw to the player. Players perform all of their throws first, and then move pieces according to the values of the throws without subdividing the value of a single throw. Players cannot move their pieces until the throw a 1. Pieces cannot move past one another in the home row. Each piece in the home row must individually be unlocked with a throw of 1 before it can move When a player's piece lands in a space occupied by an opponent's piece, the opponent's piece is removed from the board. When a piece lands on a hole with a line connecting it to another hole, the piece moves forward along that line to the hole on the opposite end it. When a piece reaches the opponent's starting row, it cannot move if there are other pieces belonging to the player outside of this row. A piece resting on a marked space cannot be captured.","(game ""58 Holes"" (players 2) (equipment { (board (graph vertices:{ {9 27} {9 25} {9 23} {9 21} {9 19} {9 15} {9 12} {9 9} {9 6} {9 3} {9 0} {7 1} {5 2.5} {4 5} {4 7} {4 9} {4 11} {4 13} {4 15} {4 19} {4.2 21} {4.3 22.5} {4.4 24} {4.6 25.5} {4.8 27} {6 28} {7 29} {8 30} {9 31} {15 27} {15 25} {15 23} {15 21} {15 19} {15 15} {15 12} {15 9} {15 6} {15 3} {15 0} {17 1} {19 2.5} {20 5} {20 7} {20 9} {20 11} {20 13} {20 15} {19.8 19} {19.7 21} {19.6 22.5} {19.4 24} {19.2 25.5} {19 27} {18 28} {17 29} {16 30} {15 31} {12 33} } edges:{ {0 1} {1 2} {2 3} {3 4} {4 5} {5 6} {6 7} {7 8} {8 9} {9 10} {10 11} {11 12} {12 13} {13 14} {14 15} {15 16} {16 17} {17 18} {18 19} {19 20} {20 21} {21 22} {22 23} {23 24} {24 25} {25 26} {26 27} {27 28} {28 58} {29 30} {30 31} {31 32} {32 33} {33 34} {34 35} {35 36} {36 37} {37 38} {38 39} {39 40} {40 41} {41 42} {42 43} {43 44} {44 45} {45 46} {46 47} {47 48} {48 49} {49 50} {50 51} {51 52} {52 53} {53 54} {54 55} {55 56} {56 57} {57 58} } ) { (track ""Track1"" { 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 } loop:True P1 ) (track ""Track2"" { 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 } loop:True P2 ) } use:Vertex ) (dice d:2 from:0 num:4) (piece ""Marker"" Each (if (if (is In (from) (sites Start (piece (id ""Marker"" Next))) ) (all Sites (sites Occupied by:Mover) if:(is In (site) (sites Start (piece (id ""Marker"" Next))) ) ) True ) (if (= 0 (state at:(from))) (forEach Site (sites (values Remembered ""Throws"")) (if (or (is Empty (trackSite Move steps:(site))) (is Enemy (who at:(trackSite Move steps:(site))) ) ) (move (from) (to (trackSite Move steps:(site)) (apply (forget Value ""Throws"" (site))) ) (then (if (!= (last To) (if (is Mover P1) (mapEntry ""ConnectionP1"" (last To) ) (mapEntry ""ConnectionP2"" (last To) ) ) ) (if (not (is Friend (who at:(if (is Mover P1) (mapEntry ""ConnectionP1"" (last To) ) (mapEntry ""ConnectionP2"" (last To) ) ) ) ) ) (move (from (last To)) (to (if (is Mover P1) (mapEntry ""ConnectionP1"" (last To) ) (mapEntry ""ConnectionP2"" (last To) ) ) ) ) ) ) ) ) ) ) (forEach Site (sites (values Remembered ""Throws"")) (if (= 1 (site)) (if (or (is Empty (trackSite Move steps:(site)) ) (is Enemy (who at:(trackSite Move steps:(site) ) ) ) ) (move (from) (to (trackSite Move steps:(site)) (apply (forget Value ""Throws"" (site)) ) ) (then (and (set State at:(last To) 0) (if (!= (last To) (if (is Mover P1) (mapEntry ""ConnectionP1"" (last To) ) (mapEntry ""ConnectionP2"" (last To) ) ) ) (if (not (is Friend (who at:(if (is Mover P1 ) (mapEntry ""ConnectionP1"" (last To ) ) (mapEntry ""ConnectionP2"" (last To ) ) ) ) ) ) (move (from (last To)) (to (if (is Mover P1 ) (mapEntry ""ConnectionP1"" (last To ) ) (mapEntry ""ConnectionP2"" (last To ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) (map ""ConnectionP1"" { (pair 0 24) (pair 53 29) (pair 1 32) (pair 4 19) (pair 4 20) (pair 5 38) (pair 5 14) (pair 25 57) (pair 28 54) (pair 48 33) (pair 43 34) (pair 34 9) (pair 33 4) } ) (map ""ConnectionP2"" { (pair 24 0) (pair 29 53) (pair 32 1) (pair 19 4) (pair 20 4) (pair 38 5) (pair 14 5) (pair 57 25) (pair 54 28) (pair 33 48) (pair 34 43) (pair 9 34) (pair 4 33) } ) (map ""Throw"" { (pair 0 6) (pair 1 1) (pair 2 2) (pair 3 3) (pair 4 4) } ) } ) (rules (start { (place ""Marker1"" (sites {0 1 2 3 4}) state:1) (place ""Marker2"" (sites {29 30 31 32 33}) state:1) } ) phases:{ (phase ""GetMoves"" (play (do (roll) next:(move Pass (then (remember Value ""Throws"" (mapEntry ""Throw"" (count Pips)) ) ) ) (then (moveAgain)) ) ) (nextPhase (not (is In (mapEntry ""Throw"" (count Pips)) (sites {1 4 6}) ) ) ""Movement"" ) ) (phase ""Movement"" (play (if (can Move (forEach Piece)) (forEach Piece (then (if (!= 0 (count Sites in:(sites (values Remembered ""Throws"") ) ) ) (moveAgain) ) ) ) (move Pass (then (forget Value ""Throws"" All))) ) ) (nextPhase (not (!= 0 (count Sites in:(sites (values Remembered ""Throws"")) ) ) ) ""GetMoves"" ) ) } (end (if (no Pieces Next) (result Next Loss))) ) )"
4088,"Five pieces per player, which begin on the first five spaces in each track. Four sticks, each with a white side and a yellow side. Throws equal the number of white sides which fall up; when only yellow sides are up the throw equals 6. A throw of 1, 4, or 6 grants another throw to the player. Players perform all of their throws first, and then move pieces according to the values of the throws without subdividing the value of a single throw. Players cannot move their pieces until the throw a 1. Pieces cannot move past one another in the home row. Each piece in the home row must individually be unlocked with a throw of 1 before it can move When a player's piece lands in a space occupied by an opponent's piece, the opponent's piece is removed from the board. When a piece lands on a hole with a line connecting it to another hole, the piece moves forward along that line to the hole on the opposite end it. When a piece reaches the opponent's starting row, it cannot move if there are other pieces belonging to the player outside of this row. A piece resting on a marked space cannot be captured.","(game ""58 Holes"" (players 2) (equipment { (board (graph vertices:{ {9 27} {9 24} {9 21} {9 18} {9 15} {9 12} {9 9} {9 6} {9 3} {9 0} {3 0} {3 2} {3 4} {3 6} {3 8} {3 10} {3 12} {3 14} {3 16} {3 18} {3 20} {3 22} {3 24} {3 26} {3 28} {4 30} {6 31} {8 32} {10 33} {15 27} {15 24} {15 21} {15 18} {15 15} {15 12} {15 9} {15 6} {15 3} {15 0} {21 0} {21 2} {21 4} {21 6} {21 8} {21 10} {21 12} {21 14} {21 16} {21 18} {21 20} {21 22} {21 24} {21 26} {21 28} {20 30} {18 31} {16 32} {14 33} {12 33} } edges:{ {0 1} {1 2} {2 3} {3 4} {4 5} {5 6} {6 7} {7 8} {8 9} {9 10} {10 11} {11 12} {12 13} {13 14} {14 15} {15 16} {16 17} {17 18} {18 19} {19 20} {20 21} {21 22} {22 23} {23 24} {24 25} {25 26} {26 27} {27 28} {28 58} {29 30} {30 31} {31 32} {32 33} {33 34} {34 35} {35 36} {36 37} {37 38} {38 39} {39 40} {40 41} {41 42} {42 43} {43 44} {44 45} {45 46} {46 47} {47 48} {48 49} {49 50} {50 51} {51 52} {52 53} {53 54} {54 55} {55 56} {56 57} {57 58} } ) { (track ""Track1"" { 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 } loop:True P1 ) (track ""Track2"" { 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 } loop:True P2 ) } use:Vertex ) (dice d:2 from:0 num:4) (piece ""Marker"" Each (if (if (is In (from) (sites Start (piece (id ""Marker"" Next))) ) (all Sites (sites Occupied by:Mover) if:(is In (site) (sites Start (piece (id ""Marker"" Next))) ) ) True ) (if (= 0 (state at:(from))) (forEach Site (sites (values Remembered ""Throws"")) (if (or (is Empty (trackSite Move steps:(site))) (is Enemy (who at:(trackSite Move steps:(site))) ) ) (move (from) (to (trackSite Move steps:(site)) (apply (forget Value ""Throws"" (site))) ) (then (if (!= (last To) (if (is Mover P1) (mapEntry ""ConnectionP1"" (last To) ) (mapEntry ""ConnectionP2"" (last To) ) ) ) (if (not (is Friend (who at:(if (is Mover P1) (mapEntry ""ConnectionP1"" (last To) ) (mapEntry ""ConnectionP2"" (last To) ) ) ) ) ) (move (from (last To)) (to (if (is Mover P1) (mapEntry ""ConnectionP1"" (last To) ) (mapEntry ""ConnectionP2"" (last To) ) ) ) ) ) ) ) ) ) ) (forEach Site (sites (values Remembered ""Throws"")) (if (= 1 (site)) (if (or (is Empty (trackSite Move steps:(site)) ) (is Enemy (who at:(trackSite Move steps:(site) ) ) ) ) (move (from) (to (trackSite Move steps:(site)) (apply (forget Value ""Throws"" (site)) ) ) (then (and (set State at:(last To) 0) (if (!= (last To) (if (is Mover P1) (mapEntry ""ConnectionP1"" (last To) ) (mapEntry ""ConnectionP2"" (last To) ) ) ) (if (not (is Friend (who at:(if (is Mover P1 ) (mapEntry ""ConnectionP1"" (last To ) ) (mapEntry ""ConnectionP2"" (last To ) ) ) ) ) ) (move (from (last To)) (to (if (is Mover P1 ) (mapEntry ""ConnectionP1"" (last To ) ) (mapEntry ""ConnectionP2"" (last To ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) (map ""ConnectionP1"" { (pair 5 34) (pair 36 7) (pair 14 19) (pair 19 24) (pair 53 48) (pair 48 43) } ) (map ""ConnectionP2"" { (pair 34 5) (pair 7 36) (pair 19 14) (pair 24 19) (pair 48 53) (pair 43 48) } ) (map ""Throw"" { (pair 0 6) (pair 1 1) (pair 2 2) (pair 3 3) (pair 4 4) } ) } ) (rules (start { (place ""Marker1"" (sites {0 1 2 3 4}) state:1) (place ""Marker2"" (sites {29 30 31 32 33}) state:1) } ) phases:{ (phase ""GetMoves"" (play (do (roll) next:(move Pass (then (remember Value ""Throws"" (mapEntry ""Throw"" (count Pips)) ) ) ) (then (moveAgain)) ) ) (nextPhase (not (is In (mapEntry ""Throw"" (count Pips)) (sites {1 4 6}) ) ) ""Movement"" ) ) (phase ""Movement"" (play (if (can Move (forEach Piece)) (forEach Piece (then (if (!= 0 (count Sites in:(sites (values Remembered ""Throws"") ) ) ) (moveAgain) ) ) ) (move Pass (then (forget Value ""Throws"" All))) ) ) (nextPhase (not (!= 0 (count Sites in:(sites (values Remembered ""Throws"")) ) ) ) ""GetMoves"" ) ) } (end (if (no Pieces Next) (result Next Loss))) ) )"
4184,"Five pieces per player, which begin on the first five spaces in each track. Four sticks, each with a white side and a yellow side. Throws equal the number of white sides which fall up; when only yellow sides are up the throw equals 6. A throw of 1, 4, or 6 grants another throw to the player. Players perform all of their throws first, and then move pieces according to the values of the throws without subdividing the value of a single throw. Players cannot move their pieces until the throw a 1. Pieces cannot move past one another in the home row. Each piece in the home row must individually be unlocked with a throw of 1 before it can move When a player's piece lands in a space occupied by an opponent's piece, the opponent's piece is removed from the board. When a piece lands on a hole with a line connecting it to another hole, the piece moves forward along that line to the hole on the opposite end it. When a piece reaches the opponent's starting row, it cannot move if there are other pieces belonging to the player outside of this row. A piece resting on a marked space cannot be captured.","(game ""58 Holes"" (players 2) (equipment { (board (graph vertices:{ {9 27} {9 24} {9 21} {9 18} {9 15} {9 12} {9 9} {9 6} {9 3} {9 0} {3 0} {3 2} {3 4} {3 6} {3 8} {3 10} {3 12} {3 14} {3 16} {3 18} {3 20} {3 22} {3 24} {3 26} {3 28} {4 30} {6 31} {8 32} {10 33} {15 27} {15 24} {15 21} {15 18} {15 15} {15 12} {15 9} {15 6} {15 3} {15 0} {21 0} {21 2} {21 4} {21 6} {21 8} {21 10} {21 12} {21 14} {21 16} {21 18} {21 20} {21 22} {21 24} {21 26} {21 28} {20 30} {18 31} {16 32} {14 33} {12 33} } edges:{ {0 1} {1 2} {2 3} {3 4} {4 5} {5 6} {6 7} {7 8} {8 9} {9 10} {10 11} {11 12} {12 13} {13 14} {14 15} {15 16} {16 17} {17 18} {18 19} {19 20} {20 21} {21 22} {22 23} {23 24} {24 25} {25 26} {26 27} {27 28} {28 58} {29 30} {30 31} {31 32} {32 33} {33 34} {34 35} {35 36} {36 37} {37 38} {38 39} {39 40} {40 41} {41 42} {42 43} {43 44} {44 45} {45 46} {46 47} {47 48} {48 49} {49 50} {50 51} {51 52} {52 53} {53 54} {54 55} {55 56} {56 57} {57 58} } ) { (track ""Track1"" { 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 } loop:True P1 ) (track ""Track2"" { 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 } loop:True P2 ) } use:Vertex ) (dice d:2 from:0 num:4) (piece ""Marker"" Each (if (if (is In (from) (sites Start (piece (id ""Marker"" Next))) ) (all Sites (sites Occupied by:Mover) if:(is In (site) (sites Start (piece (id ""Marker"" Next))) ) ) True ) (if (= 0 (state at:(from))) (forEach Site (sites (values Remembered ""Throws"")) (if (or (is Empty (trackSite Move steps:(site))) (is Enemy (who at:(trackSite Move steps:(site))) ) ) (move (from) (to (trackSite Move steps:(site)) (apply (forget Value ""Throws"" (site))) ) (then (if (!= (last To) (if (is Mover P1) (mapEntry ""ConnectionP1"" (last To) ) (mapEntry ""ConnectionP2"" (last To) ) ) ) (if (not (is Friend (who at:(if (is Mover P1) (mapEntry ""ConnectionP1"" (last To) ) (mapEntry ""ConnectionP2"" (last To) ) ) ) ) ) (move (from (last To)) (to (if (is Mover P1) (mapEntry ""ConnectionP1"" (last To) ) (mapEntry ""ConnectionP2"" (last To) ) ) ) ) ) ) ) ) ) ) (forEach Site (sites (values Remembered ""Throws"")) (if (= 1 (site)) (if (or (is Empty (trackSite Move steps:(site)) ) (is Enemy (who at:(trackSite Move steps:(site) ) ) ) ) (move (from) (to (trackSite Move steps:(site)) (apply (forget Value ""Throws"" (site)) ) ) (then (and (set State at:(last To) 0) (if (!= (last To) (if (is Mover P1) (mapEntry ""ConnectionP1"" (last To) ) (mapEntry ""ConnectionP2"" (last To) ) ) ) (if (not (is Friend (who at:(if (is Mover P1 ) (mapEntry ""ConnectionP1"" (last To ) ) (mapEntry ""ConnectionP2"" (last To ) ) ) ) ) ) (move (from (last To)) (to (if (is Mover P1 ) (mapEntry ""ConnectionP1"" (last To ) ) (mapEntry ""ConnectionP2"" (last To ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) ) (map ""ConnectionP1"" { (pair 5 36) (pair 34 7) (pair 14 19) (pair 19 24) (pair 53 48) (pair 48 43) } ) (map ""ConnectionP2"" { (pair 36 5) (pair 7 34) (pair 19 14) (pair 24 19) (pair 48 53) (pair 43 48) } ) (map ""Throw"" { (pair 0 6) (pair 1 1) (pair 2 2) (pair 3 3) (pair 4 4) } ) } ) (rules (start { (place ""Marker1"" (sites {0 1 2 3 4}) state:1) (place ""Marker2"" (sites {29 30 31 32 33}) state:1) } ) phases:{ (phase ""GetMoves"" (play (do (roll) next:(move Pass (then (remember Value ""Throws"" (mapEntry ""Throw"" (count Pips)) ) ) ) (then (moveAgain)) ) ) (nextPhase (not (is In (mapEntry ""Throw"" (count Pips)) (sites {1 4 6}) ) ) ""Movement"" ) ) (phase ""Movement"" (play (if (can Move (forEach Piece)) (forEach Piece (then (if (!= 0 (count Sites in:(sites (values Remembered ""Throws"") ) ) ) (moveAgain) ) ) ) (move Pass (then (forget Value ""Throws"" All))) ) ) (nextPhase (not (!= 0 (count Sites in:(sites (values Remembered ""Throws"")) ) ) ) ""GetMoves"" ) ) } (end (if (no Pieces Next) (result Next Loss))) ) )"
4268,Tab rules on Marked board with D4.,"(game ""58 Holes"" (players 2) (equipment { (board (graph vertices:{ {7 26} {8 23} {8.3 21} {8.3 19} {8.5 17} {8.4 14.5} {8.5 12} {8.6 9.5} {8.6 7} {8.6 4.5} {8.8 2} {8.9 1} {8 0} {7 0.5} {6 2} {5 4.6} {5.1 7} {5 8.5} {5.1 10} {5.1 12.5} {5 15} {5.2 17} {5.4 19} {5.6 21} {5 24} {4 27} {5 29} {6 30} {8 31} {17 26} {16 23} {15.7 21} {15.7 19} {15.5 17} {15.6 14.5} {15.5 12} {15.4 9.5} {15.4 7} {15.4 4.5} {15.2 2} {15.1 1} {16 0} {17 0.5} {18 2} {19 4.6} {18.9 7} {19 8.5} {18.9 10} {18.9 12.5} {19.5 16} {19.6 18.5} {19.6 21} {19.8 23.5} {20 27} {19 30} {18 31} {16 31.5} {14 32} {12 31} } edges:{ {0 1} {1 2} {2 3} {3 4} {4 5} {5 6} {6 7} {7 8} {8 9} {9 10} {10 11} {11 12} {12 13} {13 14} {14 15} {15 16} {16 17} {17 18} {18 19} {19 20} {20 21} {21 22} {22 23} {23 24} {24 25} {25 26} {26 27} {27 28} {28 58} {29 30} {30 31} {31 32} {32 33} {33 34} {34 35} {35 36} {36 37} {37 38} {38 39} {39 40} {40 41} {41 42} {42 43} {43 44} {44 45} {45 46} {46 47} {47 48} {48 49} {49 50} {50 51} {51 52} {52 53} {53 54} {54 55} {55 56} {56 57} {57 58} } ) { (track ""Track1"" { 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 } loop:True P1 ) (track ""Track2"" { 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 } loop:True P2 ) } use:Vertex ) (dice d:4 num:1) (regions ""Protection"" {5 7 9 34 36 38 14 43 19 48 24 53 58}) (piece ""Marker"" Each (if (if (is In (from) (sites Start (piece (id ""Marker"" Next))) ) (all Sites (sites Occupied by:Mover) if:(is In (site) (sites Start (piece (id ""Marker"" Next))) ) ) True ) (if (= 0 (state at:(from))) (forEach Site (sites (values Remembered ""Throws"")) (if (or (is Empty (trackSite Move steps:(site))) (and (is Enemy (who at:(trackSite Move steps:(site) ) ) ) (not (is In (trackSite Move steps:(site)) (sites ""Protection"") ) ) ) ) (move (from) (to (trackSite Move steps:(site)) (apply (forget Value ""Throws"" (site))) ) ) ) ) (forEach Site (sites (values Remembered ""Throws"")) (if (= 1 (site)) (if (or (is Empty (trackSite Move steps:(site)) ) (and (is Enemy (who at:(trackSite Move steps:(site) ) ) ) (not (is In (trackSite Move steps:(site) ) (sites ""Protection"") ) ) ) ) (move (from) (to (trackSite Move steps:(site)) (apply (forget Value ""Throws"" (site)) ) ) (then (set State at:(last To) 0)) ) ) ) ) ) ) ) (map ""Throw"" { (pair 0 6) (pair 1 1) (pair 2 2) (pair 3 3) (pair 4 4) } ) } ) (rules (start { (place ""Marker1"" (sites {0 1 2 3 4}) state:1) (place ""Marker2"" (sites {29 30 31 32 33}) state:1) } ) phases:{ (phase ""GetMoves"" (play (do (roll) next:(move Pass (then (remember Value ""Throws"" (mapEntry ""Throw"" (count Pips)) ) ) ) (then (moveAgain)) ) ) (nextPhase (not (is In (mapEntry ""Throw"" (count Pips)) (sites {1 4 6}) ) ) ""Movement"" ) ) (phase ""Movement"" (play (if (can Move (forEach Piece)) (forEach Piece (then (if (!= 0 (count Sites in:(sites (values Remembered ""Throws"") ) ) ) (moveAgain) ) ) ) (move Pass (then (forget Value ""Throws"" All))) ) ) (nextPhase (not (!= 0 (count Sites in:(sites (values Remembered ""Throws"")) ) ) ) ""GetMoves"" ) ) } (end (if (no Pieces Next) (result Next Loss))) ) )"
4558,Tab rules on Marked board with D4.,"(game ""58 Holes"" (players 2) (equipment { (board (graph vertices:{ {7 26} {8 23} {8.3 21} {8.3 19} {8.5 17} {8.4 14.5} {8.5 12} {8.6 9.5} {8.6 7} {8.6 4.5} {8.8 2} {8.9 1} {8 0} {7 0.5} {6 2} {5 4.6} {5.1 7} {5 8.5} {5.1 10} {5.1 12.5} {5 15} {5.2 17} {5.4 19} {5.6 21} {5 24} {4 27} {5 29} {6 30} {8 31} {17 26} {16 23} {15.7 21} {15.7 19} {15.5 17} {15.6 14.5} {15.5 12} {15.4 9.5} {15.4 7} {15.4 4.5} {15.2 2} {15.1 1} {16 0} {17 0.5} {18 2} {19 4.6} {18.9 7} {19 8.5} {18.9 10} {18.9 12.5} {19.5 16} {19.6 18.5} {19.6 21} {19.8 23.5} {20 27} {19 30} {18 31} {16 31.5} {14 32} {12 31} } edges:{ {0 1} {1 2} {2 3} {3 4} {4 5} {5 6} {6 7} {7 8} {8 9} {9 10} {10 11} {11 12} {12 13} {13 14} {14 15} {15 16} {16 17} {17 18} {18 19} {19 20} {20 21} {21 22} {22 23} {23 24} {24 25} {25 26} {26 27} {27 28} {28 58} {29 30} {30 31} {31 32} {32 33} {33 34} {34 35} {35 36} {36 37} {37 38} {38 39} {39 40} {40 41} {41 42} {42 43} {43 44} {44 45} {45 46} {46 47} {47 48} {48 49} {49 50} {50 51} {51 52} {52 53} {53 54} {54 55} {55 56} {56 57} {57 58} } ) { (track ""Track1"" { 0 1 2 3 4 5 6 7 8 9 10 11 12 13 14 15 16 17 18 19 20 21 22 23 24 25 26 27 28 58 57 56 55 54 53 52 51 50 49 48 47 46 45 44 43 42 41 40 39 38 37 36 35 34 33 32 31 30 29 } loop:True P1 ) (track ""Track2"" { 29 30 31 32 33 34 35 36 37 38 39 40 41 42 43 44 45 46 47 48 49 50 51 52 53 54 55 56 57 58 28 27 26 25 24 23 22 21 20 19 18 17 16 15 14 13 12 11 10 9 8 7 6 5 4 3 2 1 0 } loop:True P2 ) } use:Vertex ) (dice d:4 num:1) (regions ""Replay"" {5 7 9 34 36 38 14 43 19 48 24 53 58}) (piece ""Marker"" Each (if (if (is In (from) (sites Start (piece (id ""Marker"" Next))) ) (all Sites (sites Occupied by:Mover) if:(is In (site) (sites Start (piece (id ""Marker"" Next))) ) ) True ) (if (= 0 (state at:(from))) (forEach Site (sites (values Remembered ""Throws"")) (if (or (is Empty (trackSite Move steps:(site))) (is Enemy (who at:(trackSite Move steps:(site))) ) ) (move (from) (to (trackSite Move steps:(site)) (apply (if (not (is In (trackSite Move steps:(site) ) (sites ""Replay"") ) ) (forget Value ""Throws"" (site)) ) ) ) ) ) ) (forEach Site (sites (values Remembered ""Throws"")) (if (= 1 (site)) (if (or (is Empty (trackSite Move steps:(site)) ) (is Enemy (who at:(trackSite Move steps:(site) ) ) ) ) (move (from) (to (trackSite Move steps:(site)) (apply (if (not (is In (trackSite Move steps:(site) ) (sites ""Replay"") ) ) (forget Value ""Throws"" (site) ) ) ) ) (then (set State at:(last To) 0)) ) ) ) ) ) ) ) (map ""Throw"" { (pair 0 6) (pair 1 1) (pair 2 2) (pair 3 3) (pair 4 4) } ) } ) (rules (start { (place ""Marker1"" (sites {0 1 2 3 4}) state:1) (place ""Marker2"" (sites {29 30 31 32 33}) state:1) } ) phases:{ (phase ""GetMoves"" (play (do (roll) next:(move Pass (then (remember Value ""Throws"" (mapEntry ""Throw"" (count Pips)) ) ) ) (then (moveAgain)) ) ) (nextPhase (not (is In (mapEntry ""Throw"" (count Pips)) (sites {1 4 6}) ) ) ""Movement"" ) ) (phase ""Movement"" (play (if (can Move (forEach Piece)) (forEach Piece (then (if (!= 0 (count Sites in:(sites (values Remembered ""Throws"") ) ) ) (moveAgain) ) ) ) (move Pass (then (forget Value ""Throws"" All))) ) ) (nextPhase (not (!= 0 (count Sites in:(sites (values Remembered ""Throws"")) ) ) ) ""GetMoves"" ) ) } (end (if (no Pieces Next) (result Next Loss))) ) )"
8104,"5x5 intersecting lines, with diagonals in each quadrant. Two triangles, the apexes of which intersect with the square at the midpoint of opposite sides. One line bisecting the base of the triangle, and another bisecting this line. Eighteen pieces per player, each side arranged on one side of the board, with the central point empty and the player's pieces on the points to the right of it. Players alternate turns moving one of their pieces to an empty point. A piece may jump an opponent's piece to capture it. Multiple captures are allowed. The player who captures all of the opponent's pieces wins.","(game ""Ahtarah Guti"" (players 2) (equipment { (board (merge { (square 5 diagonals:Alternating) (shift 0 4 (rotate 180 (wedge 3))) (shift 0 -2 (wedge 3)) } ) use:Vertex ) (piece ""Marker"" Each (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between))) ) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear) ) ) (is Enemy (who at:(between))) ) ) (to if:(is Empty (to))) ) ) (moveAgain) ) ) ) (move Step (to if:(is Empty (to)))) ) ) } ) (rules (start { (place ""Marker1"" (union { (sites Row 0) (sites Row 1) (sites Row 2) (sites Row 3) (sites {13 14}) } ) ) (place ""Marker2"" (union { (sites Row 5) (sites Row 6) (sites Row 7) (sites Row 8) (sites {10 11}) } ) ) } ) (play (if (is Prev Mover) (or (move Hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))) ) (apply (remove (between))) ) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear) ) ) (is Enemy (who at:(between))) ) ) (to if:(is Empty (to))) ) ) (moveAgain) ) ) ) (move Pass) ) (forEach Piece) ) ) (end (if (no Pieces Next) (result Next Loss))) ) )"
48896,"Two players have a collection of dominoes which they place on the grid in turn, covering up squares. One player places tiles vertically, while the other places them horizontally. The first player who cannot move loses.","(game ""Domineering"" (players 2) (equipment { (board (rectangle 6 6)) (tile ""Horz"" P1 { R F } numSides:4) (tile ""Vert"" P2 { F } numSides:4) } ) (rules (play (move Add (piece (mover) state:0) (to (sites Empty)))) (end (if (no Moves Next) (result Next Loss))) ) )"
51102,"3x3 intersecting lines. Three pieces per player. Players alternate turns placing pieces on an empty spot on the board. When all pieces are placed, players alternate turns moving a piece to any empty spot on the board. The first player to place their pieces in an orthogonal row along the lines wins.","(game ""Driesticken"" (players 2) (equipment { (board (square 3) use:Vertex) (hand Each) (piece ""Marker"" Each (move (from) (to (sites Empty)))) } ) (rules (start (place ""Marker"" ""Hand"" count:3)) phases:{ (phase ""Placement"" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site))) ) ""Movement"" ) ) (phase ""Movement"" (play (forEach Piece))) } (end (if (is Line 3 Orthogonal) (result Mover Win))) ) )"
64262,2x7 board.,"(game ""Gabata (Shoa I)"" (players 2) (equipment { (mancalaBoard 2 7 store:None { (track ""TrackCCW"" ""0,E,N,W"" loop:True) (track ""TrackCW"" ""6,W,N,E"" loop:True) } ) (piece ""Seed"" Shared) (hand Each) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (map ""RightMost"" { (pair P1 5) (pair P2 6) }) } ) (rules (start { (set RememberValue ""OwnedP1"" (sites Bottom)) (set RememberValue ""OwnedP2"" (sites Top)) (set Count 4 to:(sites Track)) } ) phases:{ (phase ""Sowing"" (play (or { (move Select (from (if (is Prev Mover) (sites { (var ""Replay"") }) (if (is Mover P1) (sites (values Remembered ""OwnedP1"") ) (sites (values Remembered ""OwnedP2"") ) ) ) if:(and (< 0 (count at:(from))) (= 0 (state at:(from))) ) ) (then (sow ""TrackCCW"" apply:(if (and (= 0 (state at:(to))) (= 4 (count at:(to))) ) (set State at:(to) (mover)) (if (< 1 (count at:(to))) (if (= 0 (state at:(to))) (and (moveAgain) (set Var ""Replay"" (to) ) ) (if (!= (mover) (state at:(to)) ) (and (fromTo (from (to)) (to (handSite Mover ) ) count:(min 2 (count at:(to ) ) ) ) (set State at:(to) (state at:(to) ) ) ) ) ) ) ) ) ) ) } (then (if (all Sites (forEach (sites Board) if:(= 0 (state at:(site))) ) if:(= 0 (count at:(site))) ) (and { (forEach Site (forEach (sites Board) if:(= 1 (state at:(site))) ) (fromTo (from (site)) (to (handSite P1)) count:(count at:(site)) ) ) (forEach Site (forEach (sites Board) if:(= 2 (state at:(site))) ) (fromTo (from (site)) (to (handSite P2)) count:(count at:(site)) ) ) (forget Value ""OwnedP1"" All) (forget Value ""OwnedP2"" All) (set Var ""Round"" (+ 1 (var ""Round""))) } ) ) ) ) ) (end (if (all Sites (sites Board) if:(= 0 (count at:(site)))) { (if (>= 1 (count Cell at:(handSite P1))) (result P2 Win) ) (if (>= 1 (count Cell at:(handSite P2))) (result P1 Win) ) } ) ) (nextPhase (all Sites (sites Board) if:(= 0 (count at:(site)))) ""BetweenRounds"" ) ) (phase ""BetweenRounds"" (play (if (<= 4 (count Cell at:(handSite Mover))) (move (from (handSite Mover)) (to (trackSite FirstSite ""TrackCW"" from:(mapEntry ""RightMost"" Mover) if:(is Empty (to)) ) ) count:4 (then (and { (if (is Mover P1) (remember Value ""OwnedP1"" (last To) ) (remember Value ""OwnedP2"" (last To) ) ) (if (<= 4 (count Cell at:(handSite Mover) ) ) (moveAgain) (if (= 3 (count Cell at:(handSite Mover) ) ) (and { (fromTo (from (handSite Mover ) ) (to (trackSite FirstSite ""TrackCW"" from:(mapEntry ""RightMost"" Mover ) if:(is Empty (to) ) ) ) count:3 ) (fromTo (from (handSite Next ) ) (to (trackSite FirstSite ""TrackCW"" from:(mapEntry ""RightMost"" Mover ) if:(is Empty (to) ) ) ) count:1 ) (if (is Mover P1) (remember Value ""OwnedP1"" (trackSite FirstSite ""TrackCW"" from:(mapEntry ""RightMost"" Mover ) if:(is Empty (to) ) ) ) (remember Value ""OwnedP2"" (trackSite FirstSite ""TrackCW"" from:(mapEntry ""RightMost"" Mover ) if:(is Empty (to) ) ) ) ) } ) (if (= 2 (count Cell at:(handSite Mover ) ) ) (and { (fromTo (from (handSite Mover ) ) (to (trackSite FirstSite ""TrackCW"" from:(mapEntry ""RightMost"" Mover ) if:(is Empty (to ) ) ) ) count:2 ) (fromTo (from (handSite Next ) ) (to (trackSite FirstSite ""TrackCW"" from:(mapEntry ""RightMost"" Mover ) if:(is Empty (to ) ) ) ) count:2 ) (if (< 50 (value Random (range 1 100 ) ) ) (remember Value ""OwnedP1"" (trackSite FirstSite ""TrackCW"" from:(mapEntry ""RightMost"" Mover ) if:(is Empty (to ) ) ) ) (remember Value ""OwnedP2"" (trackSite FirstSite ""TrackCW"" from:(mapEntry ""RightMost"" Mover ) if:(is Empty (to ) ) ) ) ) } ) ) ) ) } ) ) ) (then (if (and (is Empty (handSite P1)) (is Empty (handSite P2)) ) (and (if (is Even (var ""Round"")) (set NextPlayer (player 2)) (set NextPlayer (player 1)) ) (set Pending) ) ) ) ) ) (nextPhase (and (is Empty (handSite P1)) (is Empty (handSite P2))) ""Sowing"" ) ) } ) )"
77280,"If the hounds do not block the hare before the game times out, the hare wins.","(game ""Hund efter Hare (Thy)"" (players 2) (equipment { (board (remove (add (merge { (rectangle 3 5) (shift 1 0 (scale 0.5 (rectangle 5 1))) (shift 3 0 (scale 0.5 (rectangle 5 1))) (shift -1 1 (rectangle 1 7)) } ) edges:{ {0 15} {15 7} {7 18} {18 14} {17 4} {7 17} {7 16} {16 10} {19 10} {0 19} {20 14} {20 4} {12 16} {16 5} {5 15} {15 2} {2 17} {17 9} {9 18} {18 12} } ) edges:{ { 11 6} { 6 1 } { 13 8 } { 8 3 } } ) use:Vertex ) (piece ""Hare"" P1 (move Step (to if:(is Empty (to))))) (piece ""Dog"" P2 E (move Step Forwards (to if:(is Empty (to))))) } ) (rules (start { (place ""Hare1"" coord:""C3"") (place ""Dog2"" (sites {""B3"" ""B1"" ""A3"" ""B5""})) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5)) ) (result P1 Win) ) } ) ) )"
77636,"If the hounds do not block the hare before the game times out, the hare wins.","(game ""Hund efter Hare (Vendsyssel)"" (players 2) (equipment { (board (add (merge { (add (remove (rectangle 1 7) vertices:{3}) edges:{ { 2 3} } ) (scale 2 (shift 0.5 -0.5 (rectangle 1 3))) (scale 2 (shift 0.5 0.5 (rectangle 1 3))) } ) edges:{ {0 9} {0 6} {11 5} {5 8} {1 6} {1 9} {4 11} {4 8} {9 2} {2 7} {6 2} {2 10} {10 3} {3 8} {7 3} {3 11} } ) use:Vertex ) (piece ""Hare"" P1 (move Step (to if:(is Empty (to))))) (piece ""Dog"" P2 (move Step (to if:(is Empty (to))))) } ) (rules (start { (place ""Hare1"" coord:""B2"") (place ""Dog2"" (sites {""A2"" ""B1"" ""B3""})) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5)) ) (result P1 Win) ) } ) ) )"
96132,"5x5 intersecting lines, with diagonals in each quadrant. Two triangles, the apexes of which intersect with the square at the midpoint of opposite sides. One line bisecting the base of the triangle, and another bisecting this line. Eighteen pieces per player, each side arranged on one side of the board, with the central point empty and the player's pieces on the points to the right of it. Players alternate turns moving one of their pieces to an empty point. A piece may jump an opponent's piece to capture it. Multiple captures are allowed. The player who captures all of the opponent's pieces wins.","(game ""Lam Pusri"" (players 2) (equipment { (board (merge { (square 5 diagonals:Alternating) (shift 0 4 (rotate 180 (wedge 3))) (shift 0 -2 (wedge 3)) } ) use:Vertex ) (piece ""Marker"" Each (or (move Hop (between if:(is Enemy (who at:(between))) (apply (remove (between))) ) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear) ) ) (is Enemy (who at:(between))) ) ) (to if:(is Empty (to))) ) ) (moveAgain) ) ) ) (move Step (to if:(is Empty (to)))) ) ) } ) (rules (start { (place ""Marker1"" (union { (sites Row 0) (sites Row 1) (sites Row 2) (sites Row 3) (expand (sites {""E5""}) W) } ) ) (place ""Marker2"" (union { (sites Row 5) (sites Row 6) (sites Row 7) (sites Row 8) (expand (sites {""A5""}) E) } ) ) } ) (play (if (is Prev Mover) (or (move Hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear))) (is Enemy (who at:(between))) ) (apply (remove (between))) ) (to if:(is Empty (to))) (then (if (can Move (hop (from (last To)) (between if:(and (not (is In (between) (sites ToClear) ) ) (is Enemy (who at:(between))) ) ) (to if:(is Empty (to))) ) ) (moveAgain) ) ) ) (move Pass) ) (forEach Piece) ) ) (end (if (no Pieces Next) (result Next Loss))) ) )"
114198,Hare starts first.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (scale 2 1 (rectangle 1 3)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (scale 2 1 (shift 0 2.5 (rectangle 1 3))) (scale 2 1 (shift 0 3 (rectangle 1 3))) (scale 2 1 (shift 0 -0.5 (rectangle 1 3))) } ) edges:{ {3 7} {5 4} {9 1} {3 1} {1 4} {5 9} {9 7} {9 11} {1 14} } ) use:Vertex ) (piece ""Dog"" P2 (move Step (to if:(is Empty (to))))) (piece ""Hare"" P1 (move Step (to if:(is Empty (to))))) } ) (rules (start { (place ""Hare1"" (sites {""B1""})) (place ""Dog2"" (sites {""A6"" ""B6"" ""C6""})) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5)) ) (result P1 Win) ) } ) ) )"
114776,Hare starts first.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (rectangle 1 2) (shift 1 0 (rectangle 1 3)) (shift 3 0 (rectangle 1 2)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (shift 0 2.5 (rectangle 1 2)) (shift 1 2.5 (rectangle 1 3)) (shift 3 2.5 (rectangle 1 2)) } ) edges:{ {9 5} {5 1} {9 11} {12 2} {13 7} {6 3} {6 7} } ) use:Vertex ) (piece ""Dog"" P2 (move Step (to if:(is Empty (to))))) (piece ""Hare"" P1 (move Step (to if:(is Empty (to))))) } ) (rules (start { (place ""Hare1"" (sites {""C1""})) (place ""Dog2"" (sites {""A4"" ""C4"" ""E4""})) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5)) ) (result P1 Win) ) } ) ) )"
114966,Hare starts first.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (scale 2 1 (rectangle 1 3)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (scale 2 1 (shift 0 2.5 (rectangle 1 3))) (scale 2 1 (shift 0 3 (rectangle 1 3))) } ) edges:{ {3 7} {5 4} {9 1} {3 1} {1 4} {5 9} {9 7} {9 11} } ) use:Vertex ) (piece ""Dog"" P2 (move Step (to if:(is Empty (to))))) (piece ""Hare"" P1 (move Step (to if:(is Empty (to))))) } ) (rules (start { (place ""Hare1"" (sites {""B1""})) (place ""Dog2"" (sites {""A5"" ""B5"" ""C5""})) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5)) ) (result P1 Win) ) } ) ) )"
115166,Hares start first.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (rectangle 1 2) (shift 1 0 (rectangle 1 3)) (shift 3 0 (rectangle 1 2)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (shift 0 2.5 (rectangle 1 2)) (shift 1 2.5 (rectangle 1 3)) (shift 3 2.5 (rectangle 1 2)) (scale 2 1 (shift 0 3 (rectangle 1 3))) } ) edges:{ {9 5} {5 1} {9 11} {12 2} {13 7} {6 3} {6 7} {15 12} } ) use:Vertex ) (piece ""Dog"" P2 (move Step (to if:(is Empty (to))))) (piece ""Hare"" P1 (move Step (to if:(is Empty (to))))) } ) (rules (start { (place ""Hare1"" (sites {""C1""})) (place ""Dog2"" (sites {""A5"" ""C5"" ""E5""})) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5)) ) (result P1 Win) ) } ) ) )"
115360,Hares start first.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (scale 2 1 (rectangle 1 3)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (scale 2 1 (shift 0 2.5 (rectangle 1 3))) (scale 2 1 (shift 0 3 (rectangle 1 3))) (scale 2 1 (shift 0 -0.5 (rectangle 1 3))) } ) edges:{ {3 7} {5 4} {9 1} {3 1} {1 4} {5 9} {9 7} {9 11} {1 14} } ) use:Vertex ) (piece ""Dog"" P2 (move Step (to if:(is Empty (to))))) (piece ""Hare"" P1 (move Step (to if:(is Empty (to))))) } ) (rules (start { (place ""Hare1"" (sites {""A1"" ""C1""})) (place ""Dog2"" (sites {""A6"" ""B6"" ""C6""})) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5)) ) (result P1 Win) ) } ) ) )"
115540,Hares start first.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (rectangle 1 2) (shift 1 0 (rectangle 1 3)) (shift 3 0 (rectangle 1 2)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (shift 0 2.5 (rectangle 1 2)) (shift 1 2.5 (rectangle 1 3)) (shift 3 2.5 (rectangle 1 2)) (scale 2 1 (shift 0 3 (rectangle 1 3))) (scale 2 1 (shift 0 -0.5 (rectangle 1 3))) } ) edges:{ {9 5} {5 1} {9 11} {12 2} {13 7} {6 3} {6 7} {15 12} {18 2} } ) use:Vertex ) (piece ""Dog"" P2 (move Step (to if:(is Empty (to))))) (piece ""Hare"" P1 (move Step (to if:(is Empty (to))))) } ) (rules (start { (place ""Hare1"" (sites {""A1"" ""E1""})) (place ""Dog2"" (sites {""A6"" ""C6"" ""E6""})) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5)) ) (result P1 Win) ) } ) ) )"
115716,Hares start first.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (scale 2 1 (rectangle 1 3)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (scale 2 1 (shift 0 2.5 (rectangle 1 3))) } ) edges:{ {3 7} {5 4} {9 1} {3 1} {1 4} {5 9} {9 7} } ) use:Vertex ) (piece ""Dog"" P2 (move Step (to if:(is Empty (to))))) (piece ""Hare"" P1 (move Step (to if:(is Empty (to))))) } ) (rules (start { (place ""Hare1"" (sites {""A1"" ""C1""})) (place ""Dog2"" (sites {""A4"" ""B4"" ""C4""})) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5)) ) (result P1 Win) ) } ) ) )"
115904,Hares start first.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (rectangle 1 2) (shift 1 0 (rectangle 1 3)) (shift 3 0 (rectangle 1 2)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (shift 0 2.5 (rectangle 1 2)) (shift 1 2.5 (rectangle 1 3)) (shift 3 2.5 (rectangle 1 2)) } ) edges:{ {9 5} {5 1} {9 11} {12 2} {13 7} {6 3} {6 7} } ) use:Vertex ) (piece ""Dog"" P2 (move Step (to if:(is Empty (to))))) (piece ""Hare"" P1 (move Step (to if:(is Empty (to))))) } ) (rules (start { (place ""Hare1"" (sites {""A1"" ""E1""})) (place ""Dog2"" (sites {""A4"" ""C4"" ""E4""})) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5)) ) (result P1 Win) ) } ) ) )"
116074,Hares start first.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (scale 2 1 (rectangle 1 3)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (scale 2 1 (shift 0 2.5 (rectangle 1 3))) (scale 2 1 (shift 0 3 (rectangle 1 3))) } ) edges:{ {3 7} {5 4} {9 1} {3 1} {1 4} {5 9} {9 7} {9 11} } ) use:Vertex ) (piece ""Dog"" P2 (move Step (to if:(is Empty (to))))) (piece ""Hare"" P1 (move Step (to if:(is Empty (to))))) } ) (rules (start { (place ""Hare1"" (sites {""A1"" ""C1""})) (place ""Dog2"" (sites {""A5"" ""B5"" ""C5""})) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5)) ) (result P1 Win) ) } ) ) )"
116256,Hares start first.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (rectangle 1 2) (shift 1 0 (rectangle 1 3)) (shift 3 0 (rectangle 1 2)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (shift 0 2.5 (rectangle 1 2)) (shift 1 2.5 (rectangle 1 3)) (shift 3 2.5 (rectangle 1 2)) (scale 2 1 (shift 0 3 (rectangle 1 3))) } ) edges:{ {9 5} {5 1} {9 11} {12 2} {13 7} {6 3} {6 7} {15 12} } ) use:Vertex ) (piece ""Dog"" P2 (move Step (to if:(is Empty (to))))) (piece ""Hare"" P1 (move Step (to if:(is Empty (to))))) } ) (rules (start { (place ""Hare1"" (sites {""A1"" ""E1""})) (place ""Dog2"" (sites {""A5"" ""C5"" ""E5""})) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5)) ) (result P1 Win) ) } ) ) )"
116448,Hares start first.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (rectangle 1 2) (shift 1 0 (rectangle 1 3)) (shift 3 0 (rectangle 1 2)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (shift 0 2.5 (rectangle 1 2)) (shift 1 2.5 (rectangle 1 3)) (shift 3 2.5 (rectangle 1 2)) } ) edges:{ {9 5} {5 1} {9 11} {12 2} {13 7} {6 3} {6 7} } ) use:Vertex ) (piece ""Dog"" P2 (move Step (to if:(is Empty (to))))) (piece ""Hare"" P1 (move Step (to if:(is Empty (to))))) } ) (rules (start { (place ""Hare1"" (sites {""B1"" ""D1""})) (place ""Dog2"" (sites {""A4"" ""C4"" ""E4""})) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5)) ) (result P1 Win) ) } ) ) )"
116638,Hares start first.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (scale 2 1 (rectangle 1 3)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (scale 2 1 (shift 0 2.5 (rectangle 1 3))) (scale 2 1 (shift 0 3 (rectangle 1 3))) } ) edges:{ {3 7} {5 4} {9 1} {3 1} {1 4} {5 9} {9 7} {9 11} } ) use:Vertex ) (piece ""Dog"" P2 (move Step (to if:(is Empty (to))))) (piece ""Hare"" P1 (move Step (to if:(is Empty (to))))) } ) (rules (start { (place ""Hare1"" (sites {""A5"" ""C5""})) (place ""Dog2"" (sites {""A1"" ""B1"" ""C1""})) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5)) ) (result P1 Win) ) } ) ) )"
116844,Hares start first.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (rectangle 1 2) (shift 1 0 (rectangle 1 3)) (shift 3 0 (rectangle 1 2)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (shift 0 2.5 (rectangle 1 2)) (shift 1 2.5 (rectangle 1 3)) (shift 3 2.5 (rectangle 1 2)) (scale 2 1 (shift 0 3 (rectangle 1 3))) } ) edges:{ {9 5} {5 1} {9 11} {12 2} {13 7} {6 3} {6 7} {15 12} } ) use:Vertex ) (piece ""Dog"" P2 (move Step (to if:(is Empty (to))))) (piece ""Hare"" P1 (move Step (to if:(is Empty (to))))) } ) (rules (start { (place ""Hare1"" (sites {""B1"" ""D1""})) (place ""Dog2"" (sites {""A5"" ""C5"" ""E5""})) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5)) ) (result P1 Win) ) } ) ) )"
117046,Hares start first.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (rectangle 1 2) (shift 1 0 (rectangle 1 3)) (shift 3 0 (rectangle 1 2)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (shift 0 2.5 (rectangle 1 2)) (shift 1 2.5 (rectangle 1 3)) (shift 3 2.5 (rectangle 1 2)) (scale 2 1 (shift 0 3 (rectangle 1 3))) } ) edges:{ {9 5} {5 1} {9 11} {12 2} {13 7} {6 3} {6 7} {15 12} } ) use:Vertex ) (piece ""Dog"" P2 (move Step (to if:(is Empty (to))))) (piece ""Hare"" P1 (move Step (to if:(is Empty (to))))) } ) (rules (start { (place ""Hare1"" (sites {""A5"" ""E5""})) (place ""Dog2"" (sites {""A1"" ""C1"" ""E1""})) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5)) ) (result P1 Win) ) } ) ) )"
117236,Hares start first.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (rectangle 1 2) (shift 1 0 (rectangle 1 3)) (shift 3 0 (rectangle 1 2)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (shift 0 2.5 (rectangle 1 2)) (shift 1 2.5 (rectangle 1 3)) (shift 3 2.5 (rectangle 1 2)) (scale 2 1 (shift 0 3 (rectangle 1 3))) } ) edges:{ {9 5} {5 1} {9 11} {12 2} {13 7} {6 3} {6 7} {15 12} } ) use:Vertex ) (piece ""Dog"" P2 (move Step (to if:(is Empty (to))))) (piece ""Hare"" P1 (move Step (to if:(is Empty (to))))) } ) (rules (start { (place ""Dog2"" (sites {""B1"" ""D1""})) (place ""Hare1"" (sites {""C5""})) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5)) ) (result P1 Win) ) } ) ) )"
117424,Hares start first.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (scale 2 1 (rectangle 1 3)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (scale 2 1 (shift 0 2.5 (rectangle 1 3))) (scale 2 1 (shift 0 3 (rectangle 1 3))) (scale 2 1 (shift 0 -0.5 (rectangle 1 3))) } ) edges:{ {3 7} {5 4} {9 1} {3 1} {1 4} {5 9} {9 7} {9 11} {1 14} } ) use:Vertex ) (piece ""Dog"" P2 (move Step (to if:(is Empty (to))))) (piece ""Hare"" P1 (move Step (to if:(is Empty (to))))) } ) (rules (start { (place ""Hare1"" (sites {""B1""})) (place ""Dog2"" (sites {""A6"" ""C6""})) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5)) ) (result P1 Win) ) } ) ) )"
117614,Hares start first.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (rectangle 1 2) (shift 1 0 (rectangle 1 3)) (shift 3 0 (rectangle 1 2)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (shift 0 2.5 (rectangle 1 2)) (shift 1 2.5 (rectangle 1 3)) (shift 3 2.5 (rectangle 1 2)) (scale 2 1 (shift 0 3 (rectangle 1 3))) (scale 2 1 (shift 0 -0.5 (rectangle 1 3))) } ) edges:{ {9 5} {5 1} {9 11} {12 2} {13 7} {6 3} {6 7} {15 12} {18 2} } ) use:Vertex ) (piece ""Dog"" P2 (move Step (to if:(is Empty (to))))) (piece ""Hare"" P1 (move Step (to if:(is Empty (to))))) } ) (rules (start { (place ""Hare1"" (sites {""C1""})) (place ""Dog2"" (sites {""A6"" ""E6""})) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5)) ) (result P1 Win) ) } ) ) )"
117792,Hares start first.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (scale 2 1 (rectangle 1 3)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (scale 2 1 (shift 0 2.5 (rectangle 1 3))) } ) edges:{ {3 7} {5 4} {9 1} {3 1} {1 4} {5 9} {9 7} } ) use:Vertex ) (piece ""Dog"" P2 (move Step (to if:(is Empty (to))))) (piece ""Hare"" P1 (move Step (to if:(is Empty (to))))) } ) (rules (start { (place ""Hare1"" (sites {""B1""})) (place ""Dog2"" (sites {""A4"" ""B4"" ""C4""})) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5)) ) (result P1 Win) ) } ) ) )"
117952,Hares start first.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (rectangle 1 2) (shift 1 0 (rectangle 1 3)) (shift 3 0 (rectangle 1 2)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (shift 0 2.5 (rectangle 1 2)) (shift 1 2.5 (rectangle 1 3)) (shift 3 2.5 (rectangle 1 2)) } ) edges:{ {9 5} {5 1} {9 11} {12 2} {13 7} {6 3} {6 7} } ) use:Vertex ) (piece ""Dog"" P2 (move Step (to if:(is Empty (to))))) (piece ""Hare"" P1 (move Step (to if:(is Empty (to))))) } ) (rules (start { (place ""Hare1"" (sites {""C1""})) (place ""Dog2"" (sites {""A4"" ""C4"" ""E4""})) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5)) ) (result P1 Win) ) } ) ) )"
118132,Hares start first.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (scale 2 1 (rectangle 1 3)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (scale 2 1 (shift 0 2.5 (rectangle 1 3))) (scale 2 1 (shift 0 3 (rectangle 1 3))) } ) edges:{ {3 7} {5 4} {9 1} {3 1} {1 4} {5 9} {9 7} {9 11} } ) use:Vertex ) (piece ""Dog"" P2 (move Step (to if:(is Empty (to))))) (piece ""Hare"" P1 (move Step (to if:(is Empty (to))))) } ) (rules (start { (place ""Hare1"" (sites {""B1""})) (place ""Dog2"" (sites {""A5"" ""C5""})) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5)) ) (result P1 Win) ) } ) ) )"
118288,Hares start first.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (rectangle 1 2) (shift 1 0 (rectangle 1 3)) (shift 3 0 (rectangle 1 2)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (shift 0 2.5 (rectangle 1 2)) (shift 1 2.5 (rectangle 1 3)) (shift 3 2.5 (rectangle 1 2)) (scale 2 1 (shift 0 3 (rectangle 1 3))) } ) edges:{ {9 5} {5 1} {9 11} {12 2} {13 7} {6 3} {6 7} {15 12} } ) use:Vertex ) (piece ""Dog"" P2 (move Step (to if:(is Empty (to))))) (piece ""Hare"" P1 (move Step (to if:(is Empty (to))))) } ) (rules (start { (place ""Hare1"" (sites {""C1""})) (place ""Dog2"" (sites {""A5"" ""E5""})) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5)) ) (result P1 Win) ) } ) ) )"
118478,Hares start first.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (rectangle 1 2) (shift 1 0 (rectangle 1 3)) (shift 3 0 (rectangle 1 2)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (shift 0 2.5 (rectangle 1 2)) (shift 1 2.5 (rectangle 1 3)) (shift 3 2.5 (rectangle 1 2)) } ) edges:{ {9 5} {5 1} {9 11} {12 2} {13 7} {6 3} {6 7} } ) use:Vertex ) (piece ""Dog"" P2 (move Step (to if:(is Empty (to))))) (piece ""Hare"" P1 (move Step (to if:(is Empty (to))))) } ) (rules (start { (place ""Hare1"" (sites {""C1""})) (place ""Dog2"" (sites {""B4"" ""D4""})) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5)) ) (result P1 Win) ) } ) ) )"
118658,Hares start first.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (scale 2 1 (rectangle 1 3)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (scale 2 1 (shift 0 2.5 (rectangle 1 3))) (scale 2 1 (shift 0 3 (rectangle 1 3))) } ) edges:{ {3 7} {5 4} {9 1} {3 1} {1 4} {5 9} {9 7} {9 11} } ) use:Vertex ) (piece ""Dog"" P2 (move Step (to if:(is Empty (to))))) (piece ""Hare"" P1 (move Step (to if:(is Empty (to))))) } ) (rules (start { (place ""Hare1"" (sites {""B5""})) (place ""Dog2"" (sites {""A1"" ""C1""})) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5)) ) (result P1 Win) ) } ) ) )"
118848,Hares start first.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (rectangle 1 2) (shift 1 0 (rectangle 1 3)) (shift 3 0 (rectangle 1 2)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (shift 0 2.5 (rectangle 1 2)) (shift 1 2.5 (rectangle 1 3)) (shift 3 2.5 (rectangle 1 2)) (scale 2 1 (shift 0 3 (rectangle 1 3))) } ) edges:{ {9 5} {5 1} {9 11} {12 2} {13 7} {6 3} {6 7} {15 12} } ) use:Vertex ) (piece ""Dog"" P2 (move Step (to if:(is Empty (to))))) (piece ""Hare"" P1 (move Step (to if:(is Empty (to))))) } ) (rules (start { (place ""Hare1"" (sites {""C5""})) (place ""Dog2"" (sites {""A1"" ""E1""})) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (or (>= (count Moves) (- (value MoveLimit) 10)) (>= (count Turns) (- (value TurnLimit) 5)) ) (result P1 Win) ) } ) ) )"
125946,The board has no extension and joined diagonals. Jeu Miliaire rules.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (scale 2 1 (rectangle 1 3)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (scale 2 1 (shift 0 2.5 (rectangle 1 3))) } ) edges:{ {3 7} {5 4} {9 1} {3 1} {1 4} {5 9} {9 7} } ) use:Vertex ) (piece ""Marker"" P1 (move Step (to if:(is Empty (to))))) (piece ""Marker"" P2 (move Step (to if:(and (is Empty (to)) (<= (count Steps (to) 0) (count Steps (from) 0)) ) ) ) ) (regions ""Home"" P2 (sites {6 9 5})) (regions ""Home"" P1 (sites {0})) } ) (rules (start { (place ""Marker1"" (sites P1 ""Home"")) (place ""Marker2"" (sites P2 ""Home"")) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (is In (where ""Marker"" P1) (sites P2)) (result P1 Win)) } ) ) )"
126134,The board has no extension and joined diagonals. Jeu Miliaire rules.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (rectangle 1 2) (shift 1 0 (rectangle 1 3)) (shift 3 0 (rectangle 1 2)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (shift 0 2.5 (rectangle 1 2)) (shift 1 2.5 (rectangle 1 3)) (shift 3 2.5 (rectangle 1 2)) } ) edges:{ {9 5} {5 1} {9 11} {12 2} {13 7} {6 3} {6 7} } ) use:Vertex ) (piece ""Marker"" P1 (move Step (to if:(is Empty (to))))) (piece ""Marker"" P2 (move Step (to if:(is Empty (to))))) (regions ""Home"" P2 (sites {8 13 7})) (regions ""Home"" P1 (sites {0})) } ) (rules (start { (place ""Marker1"" (sites P1 ""Home"")) (place ""Marker2"" (sites P2 ""Home"")) } ) (play (forEach Piece)) (end { (if (no Moves P1) (result P2 Win)) (if (is In (where ""Marker"" P1) (sites P2)) (result P1 Win)) } ) ) )"
126298,The board has no extension and joined diagonals. Jeu Miliaire rules Switch Players.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (scale 2 1 (rectangle 1 3)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (scale 2 1 (shift 0 2.5 (rectangle 1 3))) } ) edges:{ {3 7} {5 4} {9 1} {3 1} {1 4} {5 9} {9 7} } ) use:Vertex ) (piece ""Marker"" P2 (move Step (to if:(is Empty (to))))) (piece ""Marker"" P1 (move Step (to if:(and (is Empty (to)) (<= (count Steps (to) 0) (count Steps (from) 0)) ) ) ) ) (regions ""Home"" P1 (sites {6 9 5})) (regions ""Home"" P2 (sites {0})) } ) (rules (start { (place ""Marker2"" (sites P2 ""Home"")) (place ""Marker1"" (sites P1 ""Home"")) } ) (play (forEach Piece)) (end { (if (no Moves P2) (result P1 Win)) (if (is In (where ""Marker"" P2) (sites P1)) (result P2 Win)) } ) ) )"
126462,The board has no extension and joined diagonals. Jeu Miliaire rules Switch Players.,"(game ""Ludus Coriovalli"" (players 2) (equipment { (board (add (merge { (rectangle 1 2) (shift 1 0 (rectangle 1 3)) (shift 3 0 (rectangle 1 2)) (rectangle 2 1) (shift 4 0 (rectangle 2 1)) (shift 4 1.5 (rectangle 2 1)) (shift 0 1.5 (rectangle 2 1)) (shift 0 2.5 (rectangle 1 2)) (shift 1 2.5 (rectangle 1 3)) (shift 3 2.5 (rectangle 1 2)) } ) edges:{ {9 5} {5 1} {9 11} {12 2} {13 7} {6 3} {6 7} } ) use:Vertex ) (piece ""Marker"" P2 (move Step (to if:(is Empty (to))))) (piece ""Marker"" P1 (move Step (to if:(and (is Empty (to)) (<= (count Steps (to) 0) (count Steps (from) 0)) ) ) ) ) (regions ""Home"" P1 (sites {8 13 7})) (regions ""Home"" P2 (sites {0})) } ) (rules (start { (place ""Marker2"" (sites P2 ""Home"")) (place ""Marker1"" (sites P1 ""Home"")) } ) (play (forEach Piece)) (end { (if (no Moves P2) (result P1 Win)) (if (is In (where ""Marker"" P2) (sites P1)) (result P2 Win)) } ) ) )"
142640,"The leftmost and rightmost holes are misoro. Play starts with two counters in each hole in the outer row for each player, except their rightmost hole which contains three.","(game ""Misoro Tsoro"" (players 2) (equipment { (mancalaBoard 4 8 store:None { (track ""Track1"" ""0,E,N1,W"" loop:True P1) (track ""Track2"" ""16,E,N1,W"" loop:True P2) } ) (regions ""Home"" P1 (sites Track ""Track1"")) (regions ""Home"" P2 (sites Track ""Track2"")) (regions ""Inner"" P1 (difference (sites Track ""Track1"") (sites Bottom)) ) (regions ""Inner"" P2 (difference (sites Track ""Track2"") (sites Top)) ) (regions ""Outer"" P1 (sites Bottom)) (regions ""Outer"" P2 (sites Top)) (piece ""Seed"" Shared) } ) (rules (start { (place ""Seed"" (intersection (sites Bottom) (sites Left)) counts:{2} state:1 ) (place ""Seed"" (intersection (sites Top) (sites Right)) counts:{2} state:2 ) (place ""Seed"" (intersection (sites Top) (sites Left)) counts:{3} state:2 ) (place ""Seed"" (intersection (sites Bottom) (sites Right)) counts:{3} state:1 ) (set Count 2 to:(difference (union (sites Top) (sites Bottom)) (union (sites Left) (sites Right)) ) ) } ) phases:{ (phase ""Playing"" (play (or (if (and (!= 0 (state at:(var))) (is Prev Mover)) (move Pass) ) (move Select (from (if (is Prev Mover) (sites { (var) }) (sites Mover ""Home"") ) if:(if (not (all Sites (forEach (sites Mover) if:(< 1 (count at:(site))) ) if:(= 0 (count at:(site))) ) ) (> (count at:(from)) 1) (and (= (count at:(from)) 1) (= 0 (count at:(trackSite Move from:(from) Mover steps:1 ) ) ) ) ) ) (then (and (sow ""Track"" owner:(mover) apply:(if (= (count at:(to)) 1) (if (is In (to) (sites Mover ""Inner"") ) (if (> (count at:(if (is Mover P1) (+ (to) 8) (- (to) 8) ) ) 0 ) (and (remove (if (is Mover P1) (+ (to) 8) (- (to) 8) ) ) (if (> (count at:(if (is Mover P1 ) (+ (to ) (* 8 2 ) ) (- (to ) (* 8 2 ) ) ) ) 0 ) (remove (if (is Mover P1 ) (+ (to) (* 8 2 ) ) (- (to) (* 8 2 ) ) ) ) ) ) ) ) (and (moveAgain) (set Var (to))) ) ) (forEach Site (sites Board) (if (!= 0 (state at:(site))) (set State at:(site) (state at:(site)) ) ) ) ) ) ) ) ) ) } (end (forEach NonMover if:(all Sites (sites Player ""Home"") if:(= 0 (count at:(site))) ) (result Player Loss) ) ) ) )"
143006,"The leftmost and rightmost holes are misoro. Play starts with two counters in each hole in the outer row for each player, except their rightmost hole which contains three.","(game ""Misoro Tsoro (Additional Capture)"" (players 2) (equipment { (mancalaBoard 4 8 store:None { (track ""Track1"" ""0,E,N1,W"" loop:True P1) (track ""Track2"" ""16,E,N1,W"" loop:True P2) } ) (regions ""Home"" P1 (sites Track ""Track1"")) (regions ""Home"" P2 (sites Track ""Track2"")) (regions ""Inner"" P1 (difference (sites Track ""Track1"") (sites Bottom)) ) (regions ""Inner"" P2 (difference (sites Track ""Track2"") (sites Top)) ) (regions ""Outer"" P1 (sites Bottom)) (regions ""Outer"" P2 (sites Top)) (piece ""Seed"" Shared) } ) (rules (start { (place ""Seed"" (intersection (sites Bottom) (sites Left)) counts:{2} state:1 ) (place ""Seed"" (intersection (sites Top) (sites Right)) counts:{2} state:2 ) (place ""Seed"" (intersection (sites Top) (sites Left)) counts:{3} state:2 ) (place ""Seed"" (intersection (sites Bottom) (sites Right)) counts:{3} state:1 ) (set Count 2 to:(difference (union (sites Top) (sites Bottom)) (union (sites Left) (sites Right)) ) ) } ) phases:{ (phase ""Playing"" (play (if (< 0 (var ""ExtraCapture"")) (move Select (from (forEach (sites Next) if:(and (= 0 (state at:(site))) (< 0 (count at:(site))) ) ) ) (then (and { (if (< 1 (var ""ExtraCapture"")) (moveAgain) ) (set Var ""ExtraCapture"" (- (var ""ExtraCapture"") 1) ) (remove (last To)) (forEach Site (sites Board) (if (!= 0 (state at:(site))) (set State at:(site) (state at:(site)) ) ) ) } ) ) ) (or (if (and (!= 0 (state at:(var))) (is Prev Mover)) (move Pass) ) (move Select (from (if (is Prev Mover) (sites { (var) }) (sites Mover ""Home"") ) if:(if (not (all Sites (forEach (sites Mover) if:(< 1 (count at:(site))) ) if:(= 0 (count at:(site))) ) ) (> (count at:(from)) 1) (and (= (count at:(from)) 1) (= 0 (count at:(trackSite Move from:(from) Mover steps:1 ) ) ) ) ) ) (then (and (sow ""Track"" owner:(mover) apply:(if (= (count at:(to)) 1) (if (is In (to) (sites Mover ""Inner"") ) (if (> (count at:(if (is Mover P1 ) (+ (to) 8) (- (to) 8) ) ) 0 ) (and { (remove (if (is Mover P1 ) (+ (to ) 8 ) (- (to ) 8 ) ) ) (if (> (count at:(if (is Mover P1 ) (+ (to ) (* 8 2 ) ) (- (to ) (* 8 2 ) ) ) ) 0 ) (remove (if (is Mover P1 ) (+ (to ) (* 8 2 ) ) (- (to ) (* 8 2 ) ) ) ) ) (moveAgain) (set Var ""ExtraCapture"" 3 ) } ) ) ) (and (moveAgain) (set Var (to)) ) ) ) (forEach Site (sites Board) (if (!= 0 (state at:(site))) (set State at:(site) (state at:(site)) ) ) ) ) ) ) ) ) ) ) } (end (forEach NonMover if:(all Sites (sites Player ""Home"") if:(= 0 (count at:(site))) ) (result Player Loss) ) ) ) )"
153066,"3x3 intersecting lines. Three pieces per player. Players alternate turns placing pieces on an empty spot on the board. When all pieces are placed, players alternate turns moving a piece to any empty spot on the board. The first player to place their pieces in an orthogonal row along the lines wins.","(game ""Nine Holes"" (players 2) (equipment { (board (square 3) use:Vertex) (hand Each) (piece ""Marker"" Each (move (from) (to (sites Empty)))) } ) (rules (start (place ""Marker"" ""Hand"" count:3)) phases:{ (phase ""Placement"" (play (move (from (handSite Mover)) (to (sites Empty)))) (nextPhase (all Sites (sites Hand P2) if:(= 0 (count Cell at:(site))) ) ""Movement"" ) ) (phase ""Movement"" (play (forEach Piece))) } (end (if (is Line 3 Orthogonal) (result Mover Win))) ) )"
159184,"4x8 board. Two counters in each hole. Sowing proceeds in an anti-clockwise direction. The first move must begin from the second hole from the right in the player's outer row, and proceed as follows, and is played simultaneously by both players: sow the two counters from that first hole, capture the counters in the opponent's two opposite holes and sow them, starting in the rightmost hole in the outer row, capture from the opposite two holes on the opponent's side and sow them again from the same hole. When the final counter falls in an occupied hole, those counters are picked up and sowing continues. The opening move ends when the final counter falls in an empty hole. The main phase then begins. When the final counter falls into an occupied hole in the player's inner row and both of the opposite holes on the opponent's side of the board are occupied, the counters in the opposite holes are captured and sown beginning in the first hole that was sown into to begin the sowing that caused the capture. When the final counter falls into an occupied hole and a capture is not possible, the contents of the hole are picked up and sowing continues. When the final counter lands in an empty hole, the turn ends. Players cannot sow from a hole containing a single counter. The player who captures all of their opponent's counters wins.","(game ""Otep"" (players 2) (equipment { (mancalaBoard 4 8 store:None { (track ""Track1"" ""0,E,N1,W"" loop:True P1) (track ""Track2"" ""16,E,N1,W"" loop:True P2) } ) (regions ""Home"" P1 (sites Track ""Track1"")) (regions ""Home"" P2 (sites Track ""Track2"")) (regions ""Inner"" P1 (difference (sites Track ""Track1"") (sites Bottom)) ) (regions ""Inner"" P2 (difference (sites Track ""Track2"") (sites Top)) ) (piece ""Seed"" Shared) (map ""SecondRightOuter"" { (pair P1 14) (pair P2 17) }) (map ""RightOuter"" { (pair P1 15) (pair P2 16) }) (hand Each) } ) (rules (start (set Count 2 to:(sites Board))) phases:{ (phase ""Opening1"" (play (move Select (from (mapEntry ""SecondRightOuter"" Mover)) (then (sow ""Track"" owner:(mover) apply:(and (fromTo (from (if (is Mover P1) (+ (last From) 8) (- (last From) 8) ) ) (to (mapEntry ""RightOuter"" Mover)) count:2 ) (fromTo (from (if (is Mover P1) (+ (last From) (* 8 2)) (- (last From) (* 8 2)) ) ) (to (mapEntry ""RightOuter"" Mover)) count:2 ) ) ) ) ) ) (nextPhase Mover ""Opening2"") ) (phase ""Opening2"" (play (move Select (from (mapEntry ""RightOuter"" Mover)) (then (sow ""Track"" owner:(mover) apply:(and (fromTo (from (if (is Mover P1) (+ (last From) 8) (- (last From) 8) ) ) (to (mapEntry ""RightOuter"" Mover)) count:2 ) (fromTo (from (if (is Mover P1) (+ (last From) (* 8 2)) (- (last From) (* 8 2)) ) ) (to (mapEntry ""RightOuter"" Mover)) count:2 ) ) ) ) ) ) (nextPhase Mover ""Opening3"") ) (phase ""Opening3"" (play (move Select (from (if (is Prev Mover) (sites { (last To afterConsequence:True) }) (sites { (mapEntry ""RightOuter"" Mover) }) ) ) (then (sow ""Track"" owner:(mover) apply:(if (< 1 (count at:(to))) (moveAgain)) ) ) ) ) (nextPhase Mover (not (is Next Prev)) ""Sowing"") ) (phase ""Sowing"" (play (move Select (from (if (is Prev Mover) (sites { (last To afterConsequence:True) }) (sites Mover) ) if:(> (count at:(from)) 1) ) (then (sow ""Track"" owner:(mover) apply:(if (and { (is In (to) (sites Mover ""Inner"")) (< 1 (count at:(to))) (is Occupied (if (is Mover P1) (+ (to) (* 8 2)) (- (to) (* 8 2)) ) ) (is Occupied (if (is Mover P1) (+ (to) 8) (- (to) 8) ) ) } ) (and { (fromTo (from (if (is Mover P1) (+ (to) (* 8 2)) (- (to) (* 8 2)) ) ) (to (last From)) count:(count at:(if (is Mover P1) (+ (to) (* 8 2)) (- (to) (* 8 2)) ) ) ) (fromTo (from (if (is Mover P1) (+ (to) 8) (- (to) 8) ) ) (to (last From)) count:(count at:(if (is Mover P1) (+ (to) 8) (- (to) 8) ) ) ) (sow (last From) count:(+ (count at:(if (is Mover P1) (+ (to) 8) (- (to) 8) ) ) (count at:(if (is Mover P1) (+ (to) (* 8 2)) (- (to) (* 8 2)) ) ) ) ""Track"" owner:(mover) ) } ) (if (< 1 (count at:(to))) (moveAgain)) ) ) ) ) ) ) } (end (forEach Player if:(no Moves Player) (result Player Loss))) ) )"
164288,"Two players have a collection of dominoes which they place on the grid in turn, covering up squares. One player places tiles vertically, while the other places them horizontally. The first player who cannot move loses.","(game ""Pentomino"" (players 2) (equipment { (board (rectangle 6 10)) (tile ""Z"" Shared { F R F F L F }) (tile ""Y"" Shared { F R F R R F R F F }) (tile ""X"" Shared { F L F L L F F L L F R F }) (tile ""W"" Shared { F L F R F L F }) (tile ""V"" Shared { F F R F F }) (tile ""U"" Shared { F L F F L F }) (tile ""T"" Shared { F F R F R R F F }) (tile ""P"" Shared { F F R F R F }) (tile ""N"" Shared { F R F L F F }) (tile ""L"" Shared { F R F F F }) (tile ""I"" Shared { F F F F }) (tile ""F"" Shared { F L F L L F L F R F }) (hand Shared size:12) } ) (rules (start { (place ""F"" (handSite Shared 0)) (place ""I"" (handSite Shared 1)) (place ""L"" (handSite Shared 2)) (place ""N"" (handSite Shared 3)) (place ""P"" (handSite Shared 4)) (place ""T"" (handSite Shared 5)) (place ""U"" (handSite Shared 6)) (place ""V"" (handSite Shared 7)) (place ""W"" (handSite Shared 8)) (place ""X"" (handSite Shared 9)) (place ""Y"" (handSite Shared 10)) (place ""Z"" (handSite Shared 11)) } ) (play (move (from (sites Hand Shared)) (to (sites Empty)))) (end (if (no Moves Next) (result Next Loss))) ) )"
168094,"The central square is the castle, which cannot be entered by pieces or by the king once it has left. There are two sides: one with the king and 8 pieces, another with 16 undifferentiated pieces. The king begins on the castle space, and his associated pieces are arranged with two pieces on each orthogonal side of the king. The opposing side is arranged on the sides of the board, one piece on each of the three central squares on each of the four sides, and one further piece on the next row in on the central square of the row. Pieces move orthogonally any number of squares. Pieces cannot jump. If a piece is caught between two opposing pieces, it is removed from play. A piece may also be captured by trapping it between an enemy piece and the castle. The king, when in the castle, can only be captured when surrounded on four sides. If it is in a space adjacent to one of the sides, it can be captured when the opponent surrounds it on the remaining three sides. Otherwise, it is captured like any other piece. If the king moves to the edge of the board, the player controlling the king wins. If the opposing side captures the king, they win.","(game ""Poprad Game"" (players 2) (equipment { (board (square 17)) (piece ""Thrall"" P1 (move Slide Orthogonal (between if:(and (!= (between) (centrePoint)) (is Empty (between)) ) ) (then (or { (custodial (from (last To)) Orthogonal (between (max 1) if:(= (what at:(between)) (id ""Thrall2"") ) (apply (remove (between))) ) (to if:(or (is Friend (who at:(to))) (= (to) (centrePoint)) ) ) ) (surround (from (last To)) Orthogonal (between if:(and (= (what at:(between)) (id ""Jarl2"") ) (or (= (between) (centrePoint)) (is In (between) (sites ""OrthogonalSitesCentre"" ) ) ) ) (apply (trigger ""Surrounded"" P2)) ) (to if:(or (is Friend (who at:(to))) (= (to) (centrePoint)) ) ) ) (custodial (from (last To)) Orthogonal (between (max 1) if:(and (= (what at:(between)) (id ""Jarl2"") ) (and (!= (between) (centrePoint)) (not (is In (between) (sites ""OrthogonalSitesCentre"" ) ) ) ) ) (apply (trigger ""Surrounded"" P2)) ) (to if:(is Friend (who at:(to)))) ) } ) ) ) ) (piece ""Thrall"" P2 (move Slide Orthogonal (between if:(and (!= (between) (centrePoint)) (is Empty (between)) ) ) (then (custodial (from (last To)) Orthogonal (between (max 1) if:(= (what at:(between)) (id ""Thrall1"")) (apply (remove (between))) ) (to if:(or (is Friend (who at:(to))) (= (to) (centrePoint)) ) ) ) ) ) ) (piece ""Jarl"" P2 (move Slide Orthogonal (between if:(and (!= (between) (centrePoint)) (is Empty (between)) ) ) (then (custodial (from (last To)) Orthogonal (between (max 1) if:(= (what at:(between)) (id ""Thrall1"")) (apply (remove (between))) ) (to if:(or (is Friend (who at:(to))) (= (to) (centrePoint)) ) ) ) ) ) ) (regions ""OrthogonalSitesCentre"" (difference (expand origin:(centrePoint) Orthogonal) (centrePoint) ) ) } ) (rules (start { (place ""Thrall1"" { ""A9"" ""A10"" ""A8"" ""B9"" ""I17"" ""H17"" ""J17"" ""I16"" ""Q9"" ""Q10"" ""Q8"" ""P9"" ""I1"" ""H1"" ""J1"" ""I2"" } ) (place ""Thrall2"" {""G9"" ""H9"" ""I11"" ""I10"" ""I8"" ""I7"" ""J9"" ""K9""} ) (place ""Jarl2"" (centrePoint)) } ) (play (forEach Piece)) (end { (if (is Within (id ""Jarl2"") in:(sites Outer)) (result P2 Win)) (if (is Triggered ""Surrounded"" P2) (result P1 Win)) } ) ) )"
173546,"First, the giant takes place on all empty sites. The Giant piece can step to an empty site, the dwarves can step only forward to the top of the board. The giant wins if it reaches the bottom sites and the dwarves win if they block the giant to move.","(game ""Ratio"" (players { (player S) (player N) }) (equipment { (board (add (remove (merge { (rectangle 3 3 diagonals:Alternating) (shift 0 2 (wedge 2)) (shift 0 -1 (rotate 180 (wedge 2))) } ) vertices:{1} ) edges:{ { 0 1} { 3 9 } } ) use:Vertex ) (piece ""Foot"" P1 (move Step Adjacent (to if:(is Empty (to))))) (piece ""Gnome"" P2 (move Step (directions { Forwards Rightward Leftward }) (to if:(is Empty (to))) ) ) (hand P1) (regions ""Home"" P2 (intersection (sites Outer) (expand (sites Bottom))) ) (regions ""Home"" P1 (sites Top)) } ) (rules (start { (place ""Gnome2"" (intersection (sites Outer) (expand (sites Bottom))) ) (place ""Foot1"" (handSite P1)) } ) phases:{ (phase ""Opening"" (play (move (from (handSite Mover)) (to (difference (sites Board) (intersection (sites Outer) (expand (sites Bottom)) ) ) ) (then (moveAgain)) ) ) (nextPhase ""Main"") ) (phase ""Main"" (play (forEach Piece))) } (end { (if (no Moves P1) (result P2 Win)) (if (is In (where ""Foot"" P1) (sites P2)) (result P1 Win)) } ) ) )"
173710,"First, the giant takes place on all empty sites. The Giant piece can step to an empty site, the dwarves can step only forward to the top of the board. The giant wins if it reaches the bottom sites and the dwarves win if they block the giant to move.","(game ""Ratio"" (players { (player S) (player N) }) (equipment { (board (add (remove (merge { (rectangle 3 3 diagonals:Alternating) (shift 0 2 (wedge 2)) (shift 0 -1 (rotate 180 (wedge 2))) } ) vertices:{3 5} ) edges:{ { 0 4} { 2 6 } } ) use:Vertex ) (piece ""Foot"" P1 (move Step Adjacent (to if:(is Empty (to))))) (piece ""Gnome"" P2 (move Step (directions { Forwards Rightward Leftward }) (to if:(is Empty (to))) ) ) (hand P1) (regions ""Home"" P2 (intersection (sites Outer) (expand (sites Bottom))) ) (regions ""Home"" P1 (sites Top)) } ) (rules (start { (place ""Gnome2"" (intersection (sites Outer) (expand (sites Bottom))) ) (place ""Foot1"" (handSite P1)) } ) phases:{ (phase ""Opening"" (play (move (from (handSite Mover)) (to (difference (sites Board) (intersection (sites Outer) (expand (sites Bottom)) ) ) ) (then (moveAgain)) ) ) (nextPhase ""Main"") ) (phase ""Main"" (play (forEach Piece))) } (end { (if (no Moves P1) (result P2 Win)) (if (is In (where ""Foot"" P1) (sites P2)) (result P1 Win)) } ) ) )"
173878,"First, the giant takes place on all empty sites. The Giant piece can step to an empty site, the dwarves can step only forward to the top of the board. The giant wins if it reaches the bottom sites and the dwarves win if they block the giant to move.","(game ""Ratio"" (players { (player S) (player N) }) (equipment { (board (add (remove (merge { (rectangle 3 3 diagonals:Alternating) (shift 0 2 (wedge 2)) (shift 0 -1 (rotate 180 (wedge 2))) } ) vertices:{7} ) edges:{ { 6 7} { 8 4 } } ) use:Vertex ) (piece ""Foot"" P1 (move Step Adjacent (to if:(is Empty (to))))) (piece ""Gnome"" P2 (move Step (directions { Forwards Rightward Leftward }) (to if:(is Empty (to))) ) ) (hand P1) (regions ""Home"" P2 (intersection (sites Outer) (expand (sites Bottom))) ) (regions ""Home"" P1 (sites Top)) } ) (rules (start { (place ""Gnome2"" (intersection (sites Outer) (expand (sites Bottom))) ) (place ""Foot1"" (handSite P1)) } ) phases:{ (phase ""Opening"" (play (move (from (handSite Mover)) (to (difference (sites Board) (intersection (sites Outer) (expand (sites Bottom)) ) ) ) (then (moveAgain)) ) ) (nextPhase ""Main"") ) (phase ""Main"" (play (forEach Piece))) } (end { (if (no Moves P1) (result P2 Win)) (if (is In (where ""Foot"" P1) (sites P2)) (result P1 Win)) } ) ) )"
174436,"First, the giant takes place on all empty sites. The Giant piece can step to an empty site, the dwarves can step only forward to the top of the board. The Giant can capture in hopping in all directions, the dwarves can capture on forwards. The giant wins if the dwarves have no moves and the dwarves win if they capture the giant.","(game ""Ratio"" (players { (player S) (player N) }) (equipment { (board (add (remove (merge { (rectangle 3 3 diagonals:Alternating) (shift 0 2 (wedge 2)) (shift 0 -1 (rotate 180 (wedge 2))) } ) vertices:{7 3 5} ) edges:{ { 0 4} { 2 5 } { 4 5 } { 3 6 } } ) use:Vertex ) (piece ""Foot"" P1 (or (move Step Adjacent (to if:(is Empty (to)))) (move Hop Adjacent (between if:(is Enemy (who at:(between)))) (to if:(is Empty (to)) (apply (remove (between)))) (then (if (can Move (hop (from (last To)) Adjacent (between if:(is Enemy (who at:(between))) ) (to if:(is Empty (to))) ) ) (moveAgain) ) ) ) ) ) (piece ""Gnome"" P2 (or (move Step (directions { Forwards Rightward Leftward }) (to if:(is Empty (to))) ) (move Hop (directions { Forwards Rightward Leftward }) (between if:(is Enemy (who at:(between)))) (to if:(is Empty (to)) (apply (remove (between)))) ) ) ) (hand P1) (regions ""Home"" P2 (intersection (sites Outer) (expand (sites Bottom))) ) (regions ""Home"" P1 (sites Top)) } ) (rules (start { (place ""Gnome2"" (intersection (sites Outer) (expand (sites Bottom))) ) (place ""Foot1"" (handSite P1)) } ) phases:{ (phase ""Opening"" (play (move (from (handSite Mover)) (to (difference (sites Board) (intersection (sites Outer) (expand (sites Bottom)) ) ) ) (then (moveAgain)) ) ) (nextPhase ""Main"") ) (phase ""Main"" (play (if (and (!= 1 (count Turns)) (is Prev Mover)) (or (move Hop (from (last To)) Adjacent (between if:(is Enemy (who at:(between)))) (to if:(is Empty (to)) (apply (remove (between))) ) (then (if (can Move (hop (from (last To)) Adjacent (between if:(is Enemy (who at:(between)) ) ) (to if:(is Empty (to))) ) ) (moveAgain) ) ) ) (move Pass) ) (forEach Piece) ) ) ) } (end { (if (no Moves P2) (result P1 Win)) (if (= Off (where ""Foot"" P1)) (result P2 Win)) } ) ) )"
174614,"First, the giant takes place on all empty sites. The Giant piece can step to an empty site, the dwarves can step only forward to the top of the board. The Giant can capture in hopping in all directions, the dwarves can capture on forwards. The giant wins if the dwarves have no moves and the dwarves win if they capture the giant.","(game ""Ratio"" (players { (player S) (player N) }) (equipment { (board (add (remove (merge { (rectangle 3 3 diagonals:Alternating) (shift 0 2 (wedge 2)) (shift 0 -1 (rotate 180 (wedge 2))) } ) vertices:{1 3 5 7} ) edges:{ { 0 3} { 1 4 } { 2 6 } { 2 5 } { 0 1 } { 3 4 } } ) use:Vertex ) (piece ""Foot"" P1 (or (move Step Adjacent (to if:(is Empty (to)))) (move Hop Adjacent (between if:(is Enemy (who at:(between)))) (to if:(is Empty (to)) (apply (remove (between)))) ) ) ) (piece ""Gnome"" P2 (or (move Step (directions { Forwards Rightward Leftward }) (to if:(is Empty (to))) ) (move Hop (directions { Forwards Rightward Leftward }) (between if:(is Enemy (who at:(between)))) (to if:(is Empty (to)) (apply (remove (between)))) ) ) ) (hand P1) (regions ""Home"" P2 (intersection (sites Outer) (expand (sites Bottom))) ) (regions ""Home"" P1 (sites Top)) } ) (rules (start { (place ""Gnome2"" (intersection (sites Outer) (expand (sites Bottom))) ) (place ""Foot1"" (handSite P1)) } ) phases:{ (phase ""Opening"" (play (move (from (handSite Mover)) (to (difference (sites Board) (intersection (sites Outer) (expand (sites Bottom)) ) ) ) (then (moveAgain)) ) ) (nextPhase ""Main"") ) (phase ""Main"" (play (forEach Piece))) } (end { (if (no Moves P2) (result P1 Win)) (if (= Off (where ""Foot"" P1)) (result P2 Win)) } ) ) )"
174964,"First, the giant takes place on all empty sites. The Giant piece can step to an empty site, the dwarves can step only forward to the top of the board. The giant wins if it reaches the bottom sites and the dwarves win if they block the giant to move.","(game ""Ratio"" (players { (player S) (player N) }) (equipment { (board (merge { (rectangle 3 3 diagonals:Alternating) (shift 0 2 (wedge 2)) (shift 0 -1 (rotate 180 (wedge 2))) } ) use:Vertex ) (piece ""Foot"" P1 (move Step Adjacent (to if:(is Empty (to))))) (piece ""Gnome"" P2 (move Step (directions { Forwards Rightward Leftward }) (to if:(is Empty (to))) ) ) (hand P1) (regions ""Home"" P2 (intersection (sites Outer) (expand (sites Bottom))) ) (regions ""Home"" P1 (sites Top)) } ) (rules (start { (place ""Gnome2"" (intersection (sites Outer) (expand (sites Bottom))) ) (place ""Foot1"" (handSite P1)) } ) phases:{ (phase ""Opening"" (play (move (from (handSite Mover)) (to (difference (sites Board) (intersection (sites Outer) (expand (sites Bottom)) ) ) ) (then (moveAgain)) ) ) (nextPhase ""Main"") ) (phase ""Main"" (play (forEach Piece))) } (end { (if (no Moves P1) (result P2 Win)) (if (is In (where ""Foot"" P1) (sites P2)) (result P1 Win)) } ) ) )"
175160,"First, the giant takes place on all empty sites. The Giant piece can step to an empty site, the dwarves can step only forward to the top of the board. The Giant can capture in hopping in all directions, the dwarves can capture only straight forward. The giant wins if the dwarves have no moves and the dwarves win if they capture the giant.","(game ""Ratio"" (players { (player S) (player N) }) (equipment { (board (add (remove (merge { (rectangle 3 3 diagonals:Alternating) (shift 0 2 (wedge 2)) (shift 0 -1 (rotate 180 (wedge 2))) } ) vertices:{1} ) edges:{ { 0 1} { 3 9 } } ) use:Vertex ) (piece ""Foot"" P1 (or (move Step Adjacent (to if:(is Empty (to)))) (move Hop Adjacent (between if:(is Enemy (who at:(between)))) (to if:(is Empty (to)) (apply (remove (between)))) (then (if (can Move (hop (from (last To)) Adjacent (between if:(is Enemy (who at:(between))) ) (to if:(is Empty (to))) ) ) (moveAgain) ) ) ) ) ) (piece ""Gnome"" P2 (or (move Step (directions { Forwards Rightward Leftward }) (to if:(is Empty (to))) ) (move Hop (directions { Forward Rightward Leftward }) (between if:(is Enemy (who at:(between)))) (to if:(is Empty (to)) (apply (remove (between)))) ) ) ) (hand P1) (regions ""Home"" P2 (intersection (sites Outer) (expand (sites Bottom))) ) (regions ""Home"" P1 (sites Top)) } ) (rules (start { (place ""Gnome2"" (intersection (sites Outer) (expand (sites Bottom))) ) (place ""Foot1"" (handSite P1)) } ) phases:{ (phase ""Opening"" (play (move (from (handSite Mover)) (to (difference (sites Board) (intersection (sites Outer) (expand (sites Bottom)) ) ) ) (then (moveAgain)) ) ) (nextPhase ""Main"") ) (phase ""Main"" (play (if (and (!= 1 (count Turns)) (is Prev Mover)) (or (move Hop (from (last To)) Adjacent (between if:(is Enemy (who at:(between)))) (to if:(is Empty (to)) (apply (remove (between))) ) (then (if (can Move (hop (from (last To)) Adjacent (between if:(is Enemy (who at:(between)) ) ) (to if:(is Empty (to))) ) ) (moveAgain) ) ) ) (move Pass) ) (forEach Piece) ) ) ) } (end { (if (no Moves P2) (result P1 Win)) (if (= Off (where ""Foot"" P1)) (result P2 Win)) } ) ) )"
175334,"First, the giant takes place on all empty sites. The Giant piece can step to an empty site, the dwarves can step only forward to the top of the board. The Giant can capture in hopping in all directions, the dwarves can capture only diagonally. The giant wins if the dwarves have no moves and the dwarves win if they capture the giant.","(game ""Ratio"" (players { (player S) (player N) }) (equipment { (board (add (remove (merge { (rectangle 3 3 diagonals:Alternating) (shift 0 2 (wedge 2)) (shift 0 -1 (rotate 180 (wedge 2))) } ) vertices:{7} ) edges:{ { 4 8} { 6 7 } } ) use:Vertex ) (piece ""Foot"" P1 (or (move Step Adjacent (to if:(is Empty (to)))) (move Hop Adjacent (between if:(is Enemy (who at:(between)))) (to if:(is Empty (to)) (apply (remove (between)))) (then (if (can Move (hop (from (last To)) Adjacent (between if:(is Enemy (who at:(between))) ) (to if:(is Empty (to))) ) ) (moveAgain) ) ) ) ) ) (piece ""Gnome"" P2 (or (move Step (directions { Forwards Rightward Leftward }) (to if:(is Empty (to))) ) (move Hop (directions { BR BL FL FR Rightward Leftward }) (between if:(is Enemy (who at:(between)))) (to if:(is Empty (to)) (apply (remove (between)))) ) ) ) (hand P1) (regions ""Home"" P2 (intersection (sites Outer) (expand (sites Bottom))) ) (regions ""Home"" P1 (sites Top)) } ) (rules (start { (place ""Gnome2"" (intersection (sites Outer) (expand (sites Bottom))) ) (place ""Foot1"" (handSite P1)) } ) phases:{ (phase ""Opening"" (play (move (from (handSite Mover)) (to (difference (sites Board) (intersection (sites Outer) (expand (sites Bottom)) ) ) ) (then (moveAgain)) ) ) (nextPhase ""Main"") ) (phase ""Main"" (play (if (and (!= 1 (count Turns)) (is Prev Mover)) (or (move Hop (from (last To)) Adjacent (between if:(is Enemy (who at:(between)))) (to if:(is Empty (to)) (apply (remove (between))) ) (then (if (can Move (hop (from (last To)) Adjacent (between if:(is Enemy (who at:(between)) ) ) (to if:(is Empty (to))) ) ) (moveAgain) ) ) ) (move Pass) ) (forEach Piece) ) ) ) } (end { (if (no Moves P2) (result P1 Win)) (if (= Off (where ""Foot"" P1)) (result P2 Win)) } ) ) )"
175532,"First, the giant takes place on all empty sites. The Giant piece can step to an empty site, the dwarves can step only forward to the top of the board. The Giant can capture in hopping in all directions, the dwarves can capture only straight forward. The giant wins if the dwarves have no moves and the dwarves win if they capture the giant.","(game ""Ratio"" (players { (player S) (player N) }) (equipment { (board (merge { (rectangle 3 3 diagonals:Alternating) (shift 0 2 (wedge 2)) (shift 0 -1 (rotate 180 (wedge 2))) } ) use:Vertex ) (piece ""Foot"" P1 (or (move Step Adjacent (to if:(is Empty (to)))) (move Hop Adjacent (between if:(is Enemy (who at:(between)))) (to if:(is Empty (to)) (apply (remove (between)))) (then (if (can Move (hop (from (last To)) Adjacent (between if:(is Enemy (who at:(between))) ) (to if:(is Empty (to))) ) ) (moveAgain) ) ) ) ) ) (piece ""Gnome"" P2 (or (move Step (directions { Forwards Rightward Leftward }) (to if:(is Empty (to))) ) (move Hop (directions { Forward Rightward Leftward }) (between if:(is Enemy (who at:(between)))) (to if:(is Empty (to)) (apply (remove (between)))) ) ) ) (hand P1) (regions ""Home"" P2 (intersection (sites Outer) (expand (sites Bottom))) ) (regions ""Home"" P1 (sites Top)) } ) (rules (start { (place ""Gnome2"" (intersection (sites Outer) (expand (sites Bottom))) ) (place ""Foot1"" (handSite P1)) } ) phases:{ (phase ""Opening"" (play (move (from (handSite Mover)) (to (difference (sites Board) (intersection (sites Outer) (expand (sites Bottom)) ) ) ) (then (moveAgain)) ) ) (nextPhase ""Main"") ) (phase ""Main"" (play (if (and (!= 1 (count Turns)) (is Prev Mover)) (or (move Hop (from (last To)) Adjacent (between if:(is Enemy (who at:(between)))) (to if:(is Empty (to)) (apply (remove (between))) ) (then (if (can Move (hop (from (last To)) Adjacent (between if:(is Enemy (who at:(between)) ) ) (to if:(is Empty (to))) ) ) (moveAgain) ) ) ) (move Pass) ) (forEach Piece) ) ) ) } (end { (if (no Moves P2) (result P1 Win)) (if (= Off (where ""Foot"" P1)) (result P2 Win)) } ) ) )"
175732,"First, the giant takes place on all empty sites. The Giant piece can step to an empty site, the dwarves can step only forward to the top of the board. The Giant can capture in hopping in all directions, the dwarves can capture only diagonally. The giant wins if the dwarves have no moves and the dwarves win if they capture the giant.","(game ""Ratio"" (players { (player S) (player N) }) (equipment { (board (add (remove (merge { (rectangle 3 3 diagonals:Alternating) (shift 0 2 (wedge 2)) (shift 0 -1 (rotate 180 (wedge 2))) } ) vertices:{3 5} ) edges:{ { 0 4} { 2 6 } } ) use:Vertex ) (piece ""Foot"" P1 (or (move Step Adjacent (to if:(is Empty (to)))) (move Hop Adjacent (between if:(is Enemy (who at:(between)))) (to if:(is Empty (to)) (apply (remove (between)))) (then (if (can Move (hop (from (last To)) Adjacent (between if:(is Enemy (who at:(between))) ) (to if:(is Empty (to))) ) ) (moveAgain) ) ) ) ) ) (piece ""Gnome"" P2 (or (move Step (directions { Forwards Rightward Leftward }) (to if:(is Empty (to))) ) (move Hop (directions { BR BL FL FR Rightward Leftward }) (between if:(is Enemy (who at:(between)))) (to if:(is Empty (to)) (apply (remove (between)))) ) ) ) (hand P1) (regions ""Home"" P2 (intersection (sites Outer) (expand (sites Bottom))) ) (regions ""Home"" P1 (sites Top)) } ) (rules (start { (place ""Gnome2"" (intersection (sites Outer) (expand (sites Bottom))) ) (place ""Foot1"" (handSite P1)) } ) phases:{ (phase ""Opening"" (play (move (from (handSite Mover)) (to (difference (sites Board) (intersection (sites Outer) (expand (sites Bottom)) ) ) ) (then (moveAgain)) ) ) (nextPhase ""Main"") ) (phase ""Main"" (play (if (and (!= 1 (count Turns)) (is Prev Mover)) (or (move Hop (from (last To)) Adjacent (between if:(is Enemy (who at:(between)))) (to if:(is Empty (to)) (apply (remove (between))) ) (then (if (can Move (hop (from (last To)) Adjacent (between if:(is Enemy (who at:(between)) ) ) (to if:(is Empty (to))) ) ) (moveAgain) ) ) ) (move Pass) ) (forEach Piece) ) ) ) } (end { (if (no Moves P2) (result P1 Win)) (if (= Off (where ""Foot"" P1)) (result P2 Win)) } ) ) )"
175902,"First, the giant takes place on all empty sites. The Giant piece can step to an empty site, the dwarves can step only forward to the top of the board. The Giant can capture in hopping in all directions, the dwarves can capture on forwards. The giant wins if the dwarves have no moves and the dwarves win if they capture the giant.","(game ""Ratio"" (players { (player S) (player N) }) (equipment { (board (add (remove (merge { (rectangle 3 3 diagonals:Alternating) (shift 0 2 (wedge 2)) (shift 0 -1 (rotate 180 (wedge 2))) } ) vertices:{3 5} ) edges:{ { 0 4} { 2 6 } } ) use:Vertex ) (piece ""Foot"" P1 (or (move Step Adjacent (to if:(is Empty (to)))) (move Hop Adjacent (between if:(is Enemy (who at:(between)))) (to if:(is Empty (to)) (apply (remove (between)))) (then (if (can Move (hop (from (last To)) Adjacent (between if:(is Enemy (who at:(between))) ) (to if:(is Empty (to))) ) ) (moveAgain) ) ) ) ) ) (piece ""Gnome"" P2 (or (move Step (directions { Forwards Rightward Leftward }) (to if:(is Empty (to))) ) (move Hop (directions { Forwards Rightward Leftward }) (between if:(is Enemy (who at:(between)))) (to if:(is Empty (to)) (apply (remove (between)))) ) ) ) (hand P1) (regions ""Home"" P2 (intersection (sites Outer) (expand (sites Bottom))) ) (regions ""Home"" P1 (sites Top)) } ) (rules (start { (place ""Gnome2"" (intersection (sites Outer) (expand (sites Bottom))) ) (place ""Foot1"" (handSite P1)) } ) phases:{ (phase ""Opening"" (play (move (from (handSite Mover)) (to (difference (sites Board) (intersection (sites Outer) (expand (sites Bottom)) ) ) ) (then (moveAgain)) ) ) (nextPhase ""Main"") ) (phase ""Main"" (play (if (and (!= 1 (count Turns)) (is Prev Mover)) (or (move Hop (from (last To)) Adjacent (between if:(is Enemy (who at:(between)))) (to if:(is Empty (to)) (apply (remove (between))) ) (then (if (can Move (hop (from (last To)) Adjacent (between if:(is Enemy (who at:(between)) ) ) (to if:(is Empty (to))) ) ) (moveAgain) ) ) ) (move Pass) ) (forEach Piece) ) ) ) } (end { (if (no Moves P2) (result P1 Win)) (if (= Off (where ""Foot"" P1)) (result P2 Win)) } ) ) )"
180734,"4x8 board. Two counters in each hole. Sowing proceeds in an anti-clockwise direction. The first move must begin from the second hole from the right in the player's outer row, and proceed as follows, and is played simultaneously by both players: sow the two counters from that first hole, capture the counters in the opponent's two opposite holes and sow them, starting in the rightmost hole in the outer row, capture from the opposite two holes on the opponent's side and sow them again from the same hole. When the final counter falls in an occupied hole, those counters are picked up and sowing continues. The opening move ends when the final counter falls in an empty hole. The main phase then begins. When the final counter falls into an occupied hole in the player's inner row and both of the opposite holes on the opponent's side of the board are occupied, the counters in the opposite holes are captured and sown beginning in the first hole that was sown into to begin the sowing that caused the capture. When the final counter falls into an occupied hole and a capture is not possible, the contents of the hole are picked up and sowing continues. When the final counter lands in an empty hole, the turn ends. Players cannot sow from a hole containing a single counter. The player who captures all of their opponent's counters wins.","(game ""Ryakati"" (players 2) (equipment { (mancalaBoard 4 8 store:None { (track ""Track1"" ""0,E,N1,W"" loop:True P1) (track ""Track2"" ""16,E,N1,W"" loop:True P2) } ) (regions ""Home"" P1 (sites Track ""Track1"")) (regions ""Home"" P2 (sites Track ""Track2"")) (regions ""Inner"" P1 (difference (sites Track ""Track1"") (sites Bottom)) ) (regions ""Inner"" P2 (difference (sites Track ""Track2"") (sites Top)) ) (map ""RightMostOuter"" { (pair P1 7) (pair P2 24) }) (map ""SecondHoleRightOuter"" { (pair P1 6) (pair P2 25) }) (piece ""Seed"" Shared) (hand Each) } ) (rules (start (set Count 2 to:(sites Board))) phases:{ (phase ""Opening1"" (play (move Select (from (mapEntry ""SecondHoleRightOuter"" Mover)) (then (sow ""Track"" owner:(mover) apply:(and (fromTo (from (if (is Mover P1) (+ (to) 8) (- (to) 8) ) ) (to (mapEntry ""RightMostOuter"" Mover)) count:2 ) (fromTo (from (if (is Mover P1) (+ (to) (* 8 2)) (- (to) (* 8 2)) ) ) (to (mapEntry ""RightMostOuter"" Mover)) count:2 ) ) ) ) ) ) (nextPhase Mover ""Opening2"") ) (phase ""Opening2"" (play (move Select (from (mapEntry ""RightMostOuter"" Mover)) (then (sow count:4 ""Track"" owner:(mover) apply:(and (fromTo (from (if (is Mover P1) (+ (to) 8) (- (to) 8) ) ) (to (mapEntry ""RightMostOuter"" Mover)) count:2 ) (fromTo (from (if (is Mover P1) (+ (to) (* 8 2)) (- (to) (* 8 2)) ) ) (to (mapEntry ""RightMostOuter"" Mover)) count:2 ) ) origin:True ) ) ) ) (nextPhase Mover ""Opening3"") ) (phase ""Opening3"" (play (move Select (from (if (is Prev Mover) (var ""Replay"") (mapEntry ""RightMostOuter"" Mover) ) ) (then (sow count:(if (is Prev Mover) (count at:(last To)) 4 ) ""Track"" owner:(mover) apply:(if (< 1 (count at:(to))) (and (moveAgain) (set Var ""Replay"" (to))) ) origin:(not (is Prev Mover)) ) ) ) ) (nextPhase Mover (not (is Next Mover)) ""Sowing"") ) (phase ""Sowing"" (play (move Select (from (if (is Prev Mover) (sites { (var ""Replay"") }) (sites Mover ""Home"") ) if:(> (count at:(from)) 1) ) (then (sow ""Track"" owner:(mover) apply:(if (< 1 (count at:(to))) (if (and { (is In (to) (sites Mover ""Inner"") ) (is Occupied (if (is Mover P1) (+ (to) 8) (- (to) 8) ) ) (is Occupied (if (is Mover P1) (+ (to) (* 8 2)) (- (to) (* 8 2)) ) ) } ) (and { (fromTo (from (if (is Mover P1) (+ (to) 8) (- (to) 8) ) ) (to (last From)) count:(count at:(if (is Mover P1) (+ (to) 8) (- (to) 8) ) ) ) (fromTo (from (if (is Mover P1) (+ (to) (* 8 2)) (- (to) (* 8 2)) ) ) (to (last From)) count:(count at:(if (is Mover P1) (+ (to) (* 8 2)) (- (to) (* 8 2)) ) ) ) (sow (last From) count:(+ (count at:(if (is Mover P1) (+ (to) (* 8 2) ) (- (to) (* 8 2) ) ) ) (count at:(if (is Mover P1) (+ (to) 8) (- (to) 8) ) ) ) ""Track"" owner:(mover) ) } ) (and (moveAgain) (set Var ""Replay"" (to)) ) ) ) ) ) ) ) ) } (end (forEach NonMover if:(all Sites (sites Player ""Home"") if:(= 0 (count at:(site))) ) (result Player Loss) ) ) ) )"
202176,"The central square is the castle, which cannot be entered by pieces or by the king once it has left. There are two sides: one with the king and 8 pieces, another with 16 undifferentiated pieces. The king begins on the castle space, and his associated pieces are arranged with two pieces on each orthogonal side of the king. The opposing side is arranged on the sides of the board, one piece on each of the three central squares on each of the four sides, and one further piece on the next row in on the central square of the row. Pieces move orthogonally any number of squares. Pieces cannot jump. If a piece is caught between two opposing pieces, it is removed from play. A piece may also be captured by trapping it between an enemy piece and the castle. The king, when in the castle, can only be captured when surrounded on four sides. If it is in a space adjacent to one of the sides, it can be captured when the opponent surrounds it on the remaining three sides. Otherwise, it is captured like any other piece. If the king moves to the edge of the board, the player controlling the king wins. If the opposing side captures the king, they win.","(game ""Tablut"" (players 2) (equipment { (board (square 9)) (piece ""Thrall"" P1 (move Slide Orthogonal (between if:(and (!= (between) (centrePoint)) (is Empty (between)) ) ) (then (or { (custodial (from (last To)) Orthogonal (between (max 1) if:(= (what at:(between)) (id ""Thrall2"") ) (apply (remove (between))) ) (to if:(or (is Friend (who at:(to))) (= (to) (centrePoint)) ) ) ) (surround (from (last To)) Orthogonal (between if:(and (= (what at:(between)) (id ""Jarl2"") ) (or (= (between) (centrePoint)) (is In (between) (sites ""OrthogonalSitesCentre"" ) ) ) ) (apply (trigger ""Surrounded"" P2)) ) (to if:(or (is Friend (who at:(to))) (= (to) (centrePoint)) ) ) ) (custodial (from (last To)) Orthogonal (between (max 1) if:(and (= (what at:(between)) (id ""Jarl2"") ) (and (!= (between) (centrePoint)) (not (is In (between) (sites ""OrthogonalSitesCentre"" ) ) ) ) ) (apply (trigger ""Surrounded"" P2)) ) (to if:(is Friend (who at:(to)))) ) } ) ) ) ) (piece ""Thrall"" P2 (move Slide Orthogonal (between if:(and (!= (between) (centrePoint)) (is Empty (between)) ) ) (then (custodial (from (last To)) Orthogonal (between (max 1) if:(= (what at:(between)) (id ""Thrall1"")) (apply (remove (between))) ) (to if:(or (is Friend (who at:(to))) (= (to) (centrePoint)) ) ) ) ) ) ) (piece ""Jarl"" P2 (move Slide Orthogonal (between if:(and (!= (between) (centrePoint)) (is Empty (between)) ) ) (then (custodial (from (last To)) Orthogonal (between (max 1) if:(= (what at:(between)) (id ""Thrall1"")) (apply (remove (between))) ) (to if:(or (is Friend (who at:(to))) (= (to) (centrePoint)) ) ) ) ) ) ) (regions ""OrthogonalSitesCentre"" (difference (expand origin:(centrePoint) Orthogonal) (centrePoint) ) ) } ) (rules (start { (place ""Thrall1"" { ""D1"" ""E1"" ""F1"" ""E2"" ""A4"" ""A5"" ""A6"" ""B5"" ""I4"" ""I5"" ""I6"" ""H5"" ""E8"" ""D9"" ""E9"" ""F9"" ""E8"" } ) (place ""Thrall2"" {""E3"" ""E4"" ""E6"" ""E7"" ""C5"" ""D5"" ""F5"" ""G5""}) (place ""Jarl2"" (centrePoint)) } ) (play (forEach Piece)) (end { (if (is Within (id ""Jarl2"") in:(sites Outer)) (result P2 Win)) (if (is Triggered ""Surrounded"" P2) (result P1 Win)) } ) ) )"
206732,"Choose a board of the desired size and grid. Play on the nodes of the grid. The board starts empty and the dark color plays first. Players alternate placing a stone of their color onto an empty node of the board. When this placement forms an adjacent pair, the mover must choose a grid direction along which to move that pair one step, pushing all the stones in front of them. RESTRICTIONS: 1) No opponent's stone may be pushed of the board. 2) Neither stone of the moving pair may leave the board. Note that pushing off OTHER friendly stones IS allowed. Note: A pair may not be created unless it can move. After the move and/or push is completed, the mover receives the leader's token if he now has more pairs than the other player. Players may pass. The game ends when either: 1) There is no place on the board for the player who doesn't have the token to be able to form a new pair in the future. - or - 2) Both pass consecutively. The player with the token wins.","(game ""Tennessee Waltz"" (players 2) (equipment { (board (tri Hexagon (min 8 4)) use:Vertex) (hand Each size:1) (piece ""Disc"" Each) } ) (rules (play (or { (if (= 1 (mod (+ (score P1) (score P2)) 2)) (move Pass)) (move Add (to (sites Empty) if:(not (and (= 1 (count Pieces Mover in:(sites Around (to) Orthogonal) ) ) (no Pieces Mover in:(sites Around (intersection (sites Around (to) Orthogonal) (sites Occupied by:Mover) ) Orthogonal ) ) ) ) ) ) (do (set Var ""StartTurnEnemy"" (count Sites in:(sites Occupied by:Next)) ) next:(do (move Select (from (sites Empty) if:(and (= 1 (count Pieces Mover in:(sites Around (from) Orthogonal ) ) ) (no Pieces Mover in:(sites Around (intersection (sites Around (from) Orthogonal ) (sites Occupied by:Mover) ) Orthogonal ) ) ) ) (to (sites Around (from) Orthogonal)) (then (and (set Var ""LF"" (last From) (then (set Var ""LT"" (last To) (then (set Var ""PairedSite"" (regionSite (intersection (sites Around (var ""LF"" ) Orthogonal ) (sites Occupied by:Mover ) ) index:0 ) ) ) ) ) ) (add (piece (id ""Disc"" Mover)) (to (last From)) (then (if (= (var ""PairedSite"") (var ""LT"") ) (push (from (var ""LF"")) (directions Vertex from:(var ""LF"") to:(var ""LT"") ) ) (if (= (var ""LF"") (ahead (var ""PairedSite"" ) (directions Vertex from:(var ""LF"" ) to:(var ""LT"" ) ) ) ) (push (from (var ""PairedSite"" ) ) (directions Vertex from:(var ""LF"" ) to:(var ""LT"") ) ) (if (= (var ""PairedSite"" ) (ahead (var ""PairedSite"" ) (directions Vertex from:(var ""LF"" ) to:(var ""LT"" ) ) ) ) (remove (var ""LF"") ) (and (push (from (var ""LF"" ) ) (directions Vertex from:(var ""LF"" ) to:(var ""LT"" ) ) ) (push (from (var ""PairedSite"" ) ) (directions Vertex from:(var ""LF"" ) to:(var ""LT"" ) ) ) ) ) ) ) ) ) ) ) ) ifAfterwards:(and (not (is Repeat PositionalInTurn)) (= (count Sites in:(sites Occupied by:Next)) (var ""StartTurnEnemy"") ) ) ) ) } (then (and (and (set Score Mover (size Array (results from:(intersection (sites Board) (sites Occupied by:Mover) ) to:(forEach (sites Around (from) Orthogonal) if:(and (is Mover (who at:(site))) (= 2 (count Pieces Mover in:(union (sites Around (from) Orthogonal ) (sites Around (site) Orthogonal ) ) ) ) ) ) (from) ) ) ) (if (> (size Array (results from:(intersection (sites Board) (sites Occupied by:Mover) ) to:(forEach (sites Around (from) Orthogonal ) if:(and (is Mover (who at:(site))) (= 2 (count Pieces Mover in:(union (sites Around (from) Orthogonal ) (sites Around (site) Orthogonal ) ) ) ) ) ) (from) ) ) (size Array (results from:(intersection (sites Board) (sites Occupied by:Next) ) to:(forEach (sites Around (from) Orthogonal ) if:(and (is Next (who at:(site))) (= 2 (count Pieces Next in:(union (sites Around (from) Orthogonal ) (sites Around (site) Orthogonal ) ) ) ) ) ) (from) ) ) ) (addScore Mover 1 (then (if (no Pieces Mover in:(sites Hand Mover) ) (add (piece (id ""Disc"" Mover)) (to (handSite Mover)) stack:False (then (remove (sites Hand Next)) ) ) ) ) ) (if (and (not (no Pieces Mover in:(sites Hand Mover) ) ) (= (size Array (results from:(intersection (sites Board) (sites Occupied by:Mover ) ) to:(forEach (sites Around (from) Orthogonal ) if:(and (is Mover (who at:(site) ) ) (= 2 (count Pieces Mover in:(union (sites Around (from ) Orthogonal ) (sites Around (site ) Orthogonal ) ) ) ) ) ) (from) ) ) (size Array (results from:(intersection (sites Board) (sites Occupied by:Next ) ) to:(forEach (sites Around (from) Orthogonal ) if:(and (is Next (who at:(site) ) ) (= 2 (count Pieces Next in:(union (sites Around (from ) Orthogonal ) (sites Around (site ) Orthogonal ) ) ) ) ) ) (from) ) ) ) ) (addScore Mover 1) ) ) ) (and (set Score Next (size Array (results from:(intersection (sites Board) (sites Occupied by:Next) ) to:(forEach (sites Around (from) Orthogonal) if:(and (is Next (who at:(site))) (= 2 (count Pieces Next in:(union (sites Around (from) Orthogonal ) (sites Around (site) Orthogonal ) ) ) ) ) ) (from) ) ) ) (if (> (size Array (results from:(intersection (sites Board) (sites Occupied by:Next) ) to:(forEach (sites Around (from) Orthogonal ) if:(and (is Next (who at:(site))) (= 2 (count Pieces Next in:(union (sites Around (from) Orthogonal ) (sites Around (site) Orthogonal ) ) ) ) ) ) (from) ) ) (size Array (results from:(intersection (sites Board) (sites Occupied by:Mover) ) to:(forEach (sites Around (from) Orthogonal ) if:(and (is Mover (who at:(site))) (= 2 (count Pieces Mover in:(union (sites Around (from) Orthogonal ) (sites Around (site) Orthogonal ) ) ) ) ) ) (from) ) ) ) (addScore Next 1 (then (if (no Pieces Next in:(sites Hand Next) ) (add (piece (id ""Disc"" Next)) (to (handSite Next)) stack:False (then (remove (sites Hand Mover) ) ) ) ) ) ) (if (and (not (no Pieces Next in:(sites Hand Next) ) ) (= (size Array (results from:(intersection (sites Board) (sites Occupied by:Next ) ) to:(forEach (sites Around (from) Orthogonal ) if:(and (is Next (who at:(site) ) ) (= 2 (count Pieces Next in:(union (sites Around (from ) Orthogonal ) (sites Around (site ) Orthogonal ) ) ) ) ) ) (from) ) ) (size Array (results from:(intersection (sites Board) (sites Occupied by:Mover ) ) to:(forEach (sites Around (from) Orthogonal ) if:(and (is Mover (who at:(site) ) ) (= 2 (count Pieces Mover in:(union (sites Around (from ) Orthogonal ) (sites Around (site ) Orthogonal ) ) ) ) ) ) (from) ) ) ) ) (addScore Next 1) ) ) ) ) ) ) ) (end (if (or (or { (and (> (score Mover) (score Next)) (= 0 (size Array (array (sites To (select (from (sites Empty) if:(or { (and (= 1 (count Pieces Next in:(sites Around (from ) Orthogonal ) ) ) (no Pieces Next in:(sites Around (intersection (sites Around (from ) Orthogonal ) (sites Occupied by:Next ) ) Orthogonal ) ) ) (and (no Pieces Next in:(sites Around (from ) Orthogonal ) ) (< 0 (size Array (array (forEach (intersection (sites Around (from ) Orthogonal ) (sites Empty ) ) if:(no Pieces Next in:(sites Around (site ) Orthogonal ) ) ) ) ) ) ) } ) ) ) ) ) ) ) ) (and (< (score Mover) (score Next)) (= 0 (size Array (array (sites To (select (from (sites Empty) if:(or { (and (= 1 (count Pieces Mover in:(sites Around (from ) Orthogonal ) ) ) (no Pieces Mover in:(sites Around (intersection (sites Around (from ) Orthogonal ) (sites Occupied by:Mover ) ) Orthogonal ) ) ) (and (no Pieces Mover in:(sites Around (from ) Orthogonal ) ) (< 0 (size Array (array (forEach (intersection (sites Around (from ) Orthogonal ) (sites Empty ) ) if:(no Pieces Mover in:(sites Around (site ) Orthogonal ) ) ) ) ) ) ) } ) ) ) ) ) ) ) ) } ) (all Passed) ) (byScore) ) ) ) )"
206892,"Choose a board of the desired size and grid. Play on the nodes of the grid. The board starts empty and the dark color plays first. Players alternate placing a stone of their color onto an empty node of the board. When this placement forms an adjacent pair, the mover must choose a grid direction along which to move that pair one step, pushing all the stones in front of them. RESTRICTIONS: 1) No opponent's stone may be pushed of the board. 2) Neither stone of the moving pair may leave the board. Note that pushing off OTHER friendly stones IS allowed. Note: A pair may not be created unless it can move. After the move and/or push is completed, the mover receives the leader's token if he now has more pairs than the other player. Players may pass. The game ends when either: 1) There is no place on the board for the player who doesn't have the token to be able to form a new pair in the future. - or - 2) Both pass consecutively. The player with the token wins.","(game ""Tennessee Waltz"" (players 2) (equipment { (board (square (+ 1 4)) use:Vertex) (hand Each size:1) (piece ""Disc"" Each) } ) (rules (play (or { (if (= 1 (mod (+ (score P1) (score P2)) 2)) (move Pass)) (move Add (to (sites Empty) if:(not (and (= 1 (count Pieces Mover in:(sites Around (to) Orthogonal) ) ) (no Pieces Mover in:(sites Around (intersection (sites Around (to) Orthogonal) (sites Occupied by:Mover) ) Orthogonal ) ) ) ) ) ) (do (set Var ""StartTurnEnemy"" (count Sites in:(sites Occupied by:Next)) ) next:(do (move Select (from (sites Empty) if:(and (= 1 (count Pieces Mover in:(sites Around (from) Orthogonal ) ) ) (no Pieces Mover in:(sites Around (intersection (sites Around (from) Orthogonal ) (sites Occupied by:Mover) ) Orthogonal ) ) ) ) (to (sites Around (from) All)) (then (and (set Var ""LF"" (last From) (then (set Var ""LT"" (last To) (then (set Var ""PairedSite"" (regionSite (intersection (sites Around (var ""LF"" ) Orthogonal ) (sites Occupied by:Mover ) ) index:0 ) ) ) ) ) ) (add (piece (id ""Disc"" Mover)) (to (last From)) (then (if (= (var ""PairedSite"") (var ""LT"") ) (push (from (var ""LF"")) (directions Vertex from:(var ""LF"") to:(var ""LT"") ) ) (if (= (var ""LF"") (ahead (var ""PairedSite"" ) (directions Vertex from:(var ""LF"" ) to:(var ""LT"" ) ) ) ) (push (from (var ""PairedSite"" ) ) (directions Vertex from:(var ""LF"" ) to:(var ""LT"") ) ) (if (= (var ""PairedSite"" ) (ahead (var ""PairedSite"" ) (directions Vertex from:(var ""LF"" ) to:(var ""LT"" ) ) ) ) (remove (var ""LF"") ) (and (push (from (var ""LF"" ) ) (directions Vertex from:(var ""LF"" ) to:(var ""LT"" ) ) ) (push (from (var ""PairedSite"" ) ) (directions Vertex from:(var ""LF"" ) to:(var ""LT"" ) ) ) ) ) ) ) ) ) ) ) ) ifAfterwards:(and (not (is Repeat PositionalInTurn)) (= (count Sites in:(sites Occupied by:Next)) (var ""StartTurnEnemy"") ) ) ) ) } (then (and (and (set Score Mover (size Array (results from:(intersection (sites Board) (sites Occupied by:Mover) ) to:(forEach (sites Around (from) Orthogonal) if:(and (is Mover (who at:(site))) (= 2 (count Pieces Mover in:(union (sites Around (from) Orthogonal ) (sites Around (site) Orthogonal ) ) ) ) ) ) (from) ) ) ) (if (> (size Array (results from:(intersection (sites Board) (sites Occupied by:Mover) ) to:(forEach (sites Around (from) Orthogonal ) if:(and (is Mover (who at:(site))) (= 2 (count Pieces Mover in:(union (sites Around (from) Orthogonal ) (sites Around (site) Orthogonal ) ) ) ) ) ) (from) ) ) (size Array (results from:(intersection (sites Board) (sites Occupied by:Next) ) to:(forEach (sites Around (from) Orthogonal ) if:(and (is Next (who at:(site))) (= 2 (count Pieces Next in:(union (sites Around (from) Orthogonal ) (sites Around (site) Orthogonal ) ) ) ) ) ) (from) ) ) ) (addScore Mover 1 (then (if (no Pieces Mover in:(sites Hand Mover) ) (add (piece (id ""Disc"" Mover)) (to (handSite Mover)) stack:False (then (remove (sites Hand Next)) ) ) ) ) ) (if (and (not (no Pieces Mover in:(sites Hand Mover) ) ) (= (size Array (results from:(intersection (sites Board) (sites Occupied by:Mover ) ) to:(forEach (sites Around (from) Orthogonal ) if:(and (is Mover (who at:(site) ) ) (= 2 (count Pieces Mover in:(union (sites Around (from ) Orthogonal ) (sites Around (site ) Orthogonal ) ) ) ) ) ) (from) ) ) (size Array (results from:(intersection (sites Board) (sites Occupied by:Next ) ) to:(forEach (sites Around (from) Orthogonal ) if:(and (is Next (who at:(site) ) ) (= 2 (count Pieces Next in:(union (sites Around (from ) Orthogonal ) (sites Around (site ) Orthogonal ) ) ) ) ) ) (from) ) ) ) ) (addScore Mover 1) ) ) ) (and (set Score Next (size Array (results from:(intersection (sites Board) (sites Occupied by:Next) ) to:(forEach (sites Around (from) Orthogonal) if:(and (is Next (who at:(site))) (= 2 (count Pieces Next in:(union (sites Around (from) Orthogonal ) (sites Around (site) Orthogonal ) ) ) ) ) ) (from) ) ) ) (if (> (size Array (results from:(intersection (sites Board) (sites Occupied by:Next) ) to:(forEach (sites Around (from) Orthogonal ) if:(and (is Next (who at:(site))) (= 2 (count Pieces Next in:(union (sites Around (from) Orthogonal ) (sites Around (site) Orthogonal ) ) ) ) ) ) (from) ) ) (size Array (results from:(intersection (sites Board) (sites Occupied by:Mover) ) to:(forEach (sites Around (from) Orthogonal ) if:(and (is Mover (who at:(site))) (= 2 (count Pieces Mover in:(union (sites Around (from) Orthogonal ) (sites Around (site) Orthogonal ) ) ) ) ) ) (from) ) ) ) (addScore Next 1 (then (if (no Pieces Next in:(sites Hand Next) ) (add (piece (id ""Disc"" Next)) (to (handSite Next)) stack:False (then (remove (sites Hand Mover) ) ) ) ) ) ) (if (and (not (no Pieces Next in:(sites Hand Next) ) ) (= (size Array (results from:(intersection (sites Board) (sites Occupied by:Next ) ) to:(forEach (sites Around (from) Orthogonal ) if:(and (is Next (who at:(site) ) ) (= 2 (count Pieces Next in:(union (sites Around (from ) Orthogonal ) (sites Around (site ) Orthogonal ) ) ) ) ) ) (from) ) ) (size Array (results from:(intersection (sites Board) (sites Occupied by:Mover ) ) to:(forEach (sites Around (from) Orthogonal ) if:(and (is Mover (who at:(site) ) ) (= 2 (count Pieces Mover in:(union (sites Around (from ) Orthogonal ) (sites Around (site ) Orthogonal ) ) ) ) ) ) (from) ) ) ) ) (addScore Next 1) ) ) ) ) ) ) ) (end (if (or (or { (and (> (score Mover) (score Next)) (= 0 (size Array (array (sites To (select (from (sites Empty) if:(or { (and (= 1 (count Pieces Next in:(sites Around (from ) Orthogonal ) ) ) (no Pieces Next in:(sites Around (intersection (sites Around (from ) Orthogonal ) (sites Occupied by:Next ) ) Orthogonal ) ) ) (and (no Pieces Next in:(sites Around (from ) Orthogonal ) ) (< 0 (size Array (array (forEach (intersection (sites Around (from ) Orthogonal ) (sites Empty ) ) if:(no Pieces Next in:(sites Around (site ) Orthogonal ) ) ) ) ) ) ) } ) ) ) ) ) ) ) ) (and (< (score Mover) (score Next)) (= 0 (size Array (array (sites To (select (from (sites Empty) if:(or { (and (= 1 (count Pieces Mover in:(sites Around (from ) Orthogonal ) ) ) (no Pieces Mover in:(sites Around (intersection (sites Around (from ) Orthogonal ) (sites Occupied by:Mover ) ) Orthogonal ) ) ) (and (no Pieces Mover in:(sites Around (from ) Orthogonal ) ) (< 0 (size Array (array (forEach (intersection (sites Around (from ) Orthogonal ) (sites Empty ) ) if:(no Pieces Mover in:(sites Around (site ) Orthogonal ) ) ) ) ) ) ) } ) ) ) ) ) ) ) ) } ) (all Passed) ) (byScore) ) ) ) )"
220614,2x7 board.,"(game ""Um el-Bil"" (players 2) (equipment { (mancalaBoard 2 7 store:None (track ""Track"" ""0,E,N,W"" loop:True)) (regions P1 (sites Bottom)) (regions P2 (sites Top)) (piece ""Seed"" Shared) (hand Each) } ) (rules (start (set Count 4 to:(sites Track))) phases:{ (phase ""Opening"" (play (move Select (from (- 7 1)) (then (sow if:(= (count at:(to)) 1) apply:(fromTo (from (to)) (to (handSite Mover)) count:1 ) ) ) ) ) (nextPhase ""Play"") ) (phase ""Play"" (play (move Select (from (sites Mover) if:(< 0 (count at:(from)))) (then (sow if:(= (count at:(to)) 1) apply:(fromTo (from (to)) (to (handSite Mover)) count:1 ) ) ) ) ) ) } (end (if (all Sites (sites Board) if:(is Empty (site))) (byScore { (score P1 (count Cell at:(handSite P1))) (score P2 (count Cell at:(handSite P2))) } ) ) ) ) )"
228180,"Goal:Score the product of the sizes of your two largest chains. Highest score wins. In case of a tie, the last to play wins. Chains are a series of adjacent like-colored stones with no branching. Play: Boards starts empty. The darker color starts. On a turn the moving player does one of these actions: - Place one of their stones onto an empty site adjacent to no more than 2 of their stones, or - Remove one of their stones that is adjacent to more than two of their stones. Otherwise he passes. The game ends when both players pass.","(game ""Wrigglers"" (players 2) (equipment { (board (tri Limping 4) use:Vertex) (piece ""Disc"" Each) } ) (rules (play (if (= 1 (var ""Added"")) (or { (or { (move Add (piece (id ""Disc"" Mover)) (to (sites Empty) if:(> 3 (count Pieces Mover in:(sites Around (to) Orthogonal ) ) ) ) (then (set Var ""Added"" 1)) ) (move Pass) } ) (forEach Piece (if (< 2 (count Pieces Mover in:(sites Around (from) Orthogonal) ) ) (move Remove (from) (then (set Var ""Added"" 0)) ) ) Mover ) } ) (or { (move Add (piece (id ""Disc"" Mover)) (to (sites Empty) if:(> 3 (count Pieces Mover in:(sites Around (to) Orthogonal) ) ) ) (then (set Var ""Added"" 1)) ) (move Pass) } ) (then (do (forEach Site (sites Occupied by:Mover) (if (> 3 (count Pieces Mover in:(sites Around (site) Orthogonal) ) ) (set State at:(site) 0) (set State at:(site) 1) ) ) next:(do (and { (remember Value 0) (remember Value 0) (forEach Group Orthogonal (if (no Pieces in:(intersection (sites) (sites State 1) ) ) (remember Value (count Sites in:(sites)) ) ) ) } ) next:(set Var ""TopValue"" (max (values Remembered)) (then (forget Value (max (values Remembered)) (then (set Score Mover (* (var ""TopValue"") (max (values Remembered)) ) (then (forget Value All)) ) ) ) ) ) ) ) ) ) ) (end (if (all Passed) { (if (>= (score Mover) (score Next)) (result Mover Win)) } (result Next Win) ) ) ) )"
228362,"Goal:Score the product of the sizes of your two largest chains. Highest score wins. In case of a tie, the last to play wins. Chains are a series of adjacent like-colored stones with no branching. Play: Boards starts empty. The darker color starts. On a turn the moving player does one of these actions: - Place one of their stones onto an empty site adjacent to no more than 2 of their stones, or - Remove one of their stones that is adjacent to more than two of their stones. Otherwise he passes. The game ends when both players pass.","(game ""Wrigglers Squared"" (players 2) (equipment { (board (square 9) use:Vertex) (piece ""Disc"" Each) } ) (rules (play (if (= 1 (var ""Added"")) (or { (or { (move Add (piece (id ""Disc"" Mover)) (to (sites Empty) if:(> 3 (count Pieces Mover in:(sites Around (to) Orthogonal ) ) ) ) (then (set Var ""Added"" 1)) ) (move Pass) } ) (forEach Piece (if (< 2 (count Pieces Mover in:(sites Around (from) Orthogonal) ) ) (move Remove (from) (then (set Var ""Added"" 0)) ) ) Mover ) } ) (or { (move Add (piece (id ""Disc"" Mover)) (to (sites Empty) if:(> 3 (count Pieces Mover in:(sites Around (to) Orthogonal) ) ) ) (then (set Var ""Added"" 1)) ) (move Pass) } ) (then (do (forEach Site (sites Occupied by:Mover) (if (> 3 (count Pieces Mover in:(sites Around (site) Orthogonal) ) ) (set State at:(site) 0) (set State at:(site) 1) ) ) next:(do (and { (remember Value 0) (remember Value 0) (forEach Group Orthogonal (if (no Pieces in:(intersection (sites) (sites State 1) ) ) (remember Value (count Sites in:(sites)) ) ) ) } ) next:(set Var ""TopValue"" (max (values Remembered)) (then (forget Value (max (values Remembered)) (then (set Score Mover (* (var ""TopValue"") (max (values Remembered)) ) (then (forget Value All)) ) ) ) ) ) ) ) ) ) ) (end (if (all Passed) { (if (>= (score Mover) (score Next)) (result Mover Win)) } (result Next Win) ) ) ) )"
